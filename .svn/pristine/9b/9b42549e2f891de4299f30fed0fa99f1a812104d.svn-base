<template>
    <div class="content-box">
      <el-collapse accordion style="margin-bottom: 20px">
        <el-collapse-item style="text-align: left">
          <template slot="title" style="border-bottom: 1px solid #dfdfdf">
            {{club.name}}
          </template>
          <el-select v-model="userTypebatchValue" @change="batchChange(userTypebatchValue)" placeholder="用户类型" style="width: 120px;">
            <el-option
              v-for="item in userTypebatchData"
              :key="item.userTypebatchValue"
              :label="item.label"
              :value="item.userTypebatchValue"
            >
            </el-option>
          </el-select>
          <el-select v-model="userStatebatchValue" @change="batchChange(userStatebatchValue)" placeholder="用户状态" style="width: 120px;margin: 0 20px">
            <el-option
              v-for="item in userStatebatchData"
              :key="item.userStatebatchValue"
              :label="item.label"
              :value="item.userStatebatchValue"
            >
            </el-option>
          </el-select>
          <el-select v-model="bindbatchValue" @change="batchChange(bindbatchValue)" placeholder="是否绑定" style="width: 120px;">
            <el-option
              v-for="item in bindbatchData"
              :key="item.bindbatchValue"
              :label="item.label"
              :value="item.bindbatchValue"
            >
            </el-option>
          </el-select>
          <el-input
            v-model="getUserSelectState"
            placeholder="请输入内容"
            style="margin-left: 200px;width: 240px"
          ></el-input>
          <el-button type="primary" style="margin-left: 20px" @click="getUserselect(getUserSelectState)">搜索</el-button>
        </el-collapse-item>
      </el-collapse>
      <el-button type="primary"  @click="hanleAdd">添加成员</el-button>
      <el-button type="primary" @click="setDepartmentManager">设置部门/主管</el-button>
      <el-button type="primary">消息发送</el-button>
      <el-button type="primary" @click="handleDelete(multipleSelection)">删除</el-button>
      <el-select v-model="value" placeholder="状态" style="width: 100px; margin-left: 296px">
        <el-option
          v-for="item in options"
          :key="item.value"
          :label="item.label"
          :value="item.value"
        >
        </el-option>
      </el-select>
      <!--批量导入/导出-->
      <el-select v-model="batchValue" @change="batchChange(batchValue)" placeholder="批量导入/导出" style="width: 140px;">
          <el-option
            v-for="item in batchData"
            :key="item.batchValue"
            :label="item.label"
            :value="item.batchValue"
          >
          </el-option>
      </el-select>
      <!--批量导入弹层-->
      <el-dialog title="批量导入" :visible.sync="batchInDialogTableVisible">
        <el-upload
          class="upload-demo"
          drag
          action="https://jsonplaceholder.typicode.com/posts/"
          multiple>
          <i class="el-icon-upload"></i>
          <div class="el-upload__text">将文件拖到此处，或<em>点击上传</em></div>
          <div class="el-upload__tip" slot="tip"><i class="el-icon-warning" style="color: #F56C6C"></i>导入说明：文件必须为xls或xlsx格式</div>
        </el-upload>
        <div style="border-top: 1px solid #dfdfdf; padding-top: 20px;box-sizing: border-box">
          <el-button type="danger">取消导入</el-button>
          <el-button type="primary">下载文档</el-button>
        </div>
      </el-dialog>
      <!--批量导出弹层-->
      <el-dialog title="批量导出" :visible.sync="batchOutDialogTableVisible">
        <el-steps :active="step" simple>
          <el-step title="步骤 1" icon="el-icon-edit"></el-step>
          <el-step title="步骤 2" icon="el-icon-upload"></el-step>
          <el-step title="步骤 3" icon="el-icon-picture"></el-step>
        </el-steps>
        <!--第一步-->
        <div v-if="step===0">
          <div class="batch-out-row">选择导出范围</div>
          <div style="display: flex;width: 100%;font-weight: 600">
            <p style="flex: auto; text-align:left">部门选择</p>
            <p style="flex: auto; text-align:left;margin-left: 80px;">已选择部门</p>
          </div>
          <el-container style="width: 100%">
            <el-aside width="200px;" class="batch-out-content-aside">
              <el-input
                placeholder="请您输入部门进行搜索"
                v-model="filterText"
                style="width: 95%; padding: 10px 0"
              >
              </el-input>

              <el-tree
                class="filter-tree"
                :data="data2"
                :props="defaultProps"
                tooltip-effect="dark"
                default-expand-all
                :filter-node-method="filterNode"
                ref="tree2"
                :render-content="renderTree"
                style="margin-top: 10px"
              >
              </el-tree>
            </el-aside>
            <el-main class="batch-out-content-main" style="line-height: 40px;text-align: left">
              <el-tag
                v-for="tag in tags"
                :key="tag.name"
                closable
                :type="tag.type"
                @close="handleClose(tag)"
                class="el-icon-document"
                style="width: 100%;padding-left: 60px;box-sizing: border-box"
              >
                {{tag.name}}
              </el-tag>

            </el-main>
          </el-container>
          <el-row style="border-top: 1px solid #dfdfdf;padding-top: 20px;margin-top: 20px">
            <el-button type="danger" @click="lastStep1">取消</el-button>
            <el-button type="primary" @click="nextStep1">下一步</el-button>
          </el-row>
        </div>
        <!--第二步-->
        <div v-if="step===1">
          <div class="batch-out-row">验证管理员身份</div>
          <el-form :model="ruleForm2" status-icon :rules="rules2" ref="ruleForm2" label-width="100px" class="demo-ruleForm">
            <el-form-item label="密码" prop="pass">
              <el-input  placeholder="请输入管理员密码来验证身份" type="password" v-model="ruleForm2.pass" auto-complete="off"></el-input>
            </el-form-item>
          </el-form>
          <el-row style="border-top: 1px solid #dfdfdf;padding-top: 20px;margin-top: 20px">
            <el-button type="danger" @click="lastStep2">上一步</el-button>
            <el-button type="primary" @click="nextStep2">下一步</el-button>
          </el-row>
        </div>
        <!--第三步-->
        <div v-if="step===2">
          <div class="batch-out-row">确认您的选择</div>
          <el-row style="border-top: 1px solid #dfdfdf;padding-top: 20px;margin-top: 20px">
            <el-button type="danger" @click="lastStep3">返回第一步</el-button>
            <el-button type="primary" @click="nextStep3">确定</el-button>
          </el-row>
        </div>
      </el-dialog>
      <!--设置部门主管弹层-->
      <el-dialog title="设置主管" :visible.sync="setDepartmentManagerVisible" width="400px">
          <div style="text-align: left;line-height: 20px">
            <p>当前身份</p>
            <h2><input v-model="userType" type="text" style="border: none;font-size: 20px;font-weight: 600"> </h2>
            <p>选择身份</p>
            <el-select v-model="name" placeholder="请选择">
              <el-option
                v-for="item in userOptions"
                :key="item.name"
                :label="item.label"
                :value="item.name">
              </el-option>
            </el-select>
          </div>
        <el-row style="padding-top: 20px;margin-top: 20px">
          <el-button type="success" @click="setManeger">确认</el-button>
          <el-button type="danger" @click="resetManeger">取消</el-button>
        </el-row>
      </el-dialog>
      <!-- 用户列表-->
      <el-table
        ref="multipleTable"
        :data="tableData"
        stripe
        border
        show-header
        highlight-current-row
        tooltip-effect="dark"
        style="width: 100%;margin-top: 20px;text-align: left"
        @selection-change="handleSelectionChange">
        <el-table-column
          type="selection"
          label="全选"
          width="40">
        </el-table-column>
        <el-table-column
          prop="username"
          label="用户名"
          width="80">
        </el-table-column>
        <el-table-column
          prop="realname"
          label="姓名"
          width="80">
        </el-table-column>
        <el-table-column
          prop="usertype"
          label="用户类型"
          width="80">
        </el-table-column>
        <!--<el-table-column-->
          <!--prop="userType"-->
          <!--label="部门职责"-->
          <!--width="80">-->
        <!--</el-table-column>-->
        <el-table-column
          prop="user_primary"
          label="所属部门"
          width="100">
        </el-table-column>
          <el-table-column
            prop="phone"
            label="手机号"
            width="120">
          </el-table-column>
          <el-table-column
            prop="locked"
            label="用户状态"
            width="60"
            style="color: #F56C6C"
            :class="state?'stateRed':'stateGreen'"
          >
          </el-table-column>
          <el-table-column
              prop="email"
              label="邮箱"
              width="180">
          </el-table-column>
          <el-table-column label="操作">
          <template slot-scope="scope">
            <el-button
              size="mini"
              style="color: #862a7a;border: none;padding: 0;"
              @click="handleShow(scope.$index, scope.row)">查看</el-button>
            <el-button
              size="mini"
              style="color: #862a7a;border: none; padding: 0;"
              @click="handleEdit(scope.$index, scope.row)">权限</el-button>
            <el-button
              size="mini"
              style="color: #862a7a;border: none;padding: 0; margin-left: 10px"
              class="el-icon-success"
              @click="handleEdit(scope.$index, scope.row)"></el-button>
          </template>
        </el-table-column>
      </el-table>
      <!--分页-->
      <div style="margin-top: 20px">
        <div class="block">
          <el-pagination
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="currentPage"
            :page-sizes="[100, 200, 300, 400]"
            :page-size="100"
            layout="total, sizes, prev, pager, next, jumper"
            :total="400">
          </el-pagination>
        </div>
      </div>
      <!--添加用户-->
      <el-dialog title="添加成员" :visible.sync="dialogTableVisible" style="width: 120%">
        <el-container>
          <el-aside width="200px" min-height="600px" class="content-box-left">
            <img src="../../../../static/finishsmile.png" alt="" class="image">
            <p>用户: {{addTableList.username}}</p>
          </el-aside>
          <el-main class="content-box-right">
            <el-form :model="addTableList" style="display: flex;flex-wrap: wrap"  :rules="rules" ref="addTableList" label-width="100px">
              <el-form-item label="账户名称" prop="userNme"  style="flex: auto;width:45%">
                <el-input  v-model="addTableList.username"></el-input>
              </el-form-item>
              <el-form-item label="密码"  style="flex: auto;width: 45%;">
                <span>{{addTableList.password}}</span>
              </el-form-item>
              <el-form-item label="姓名"  style="flex: auto;width: 30%;">
                <el-input  v-model="addTableList.realname"></el-input>
              </el-form-item>
              <el-form-item label="姓别"  style="flex: auto;width:30%">
                <el-select v-model="addTableList.sex"  placeholder="请选择性别">
                  <el-option label="男" value="0"></el-option>
                  <el-option label="女" value="1"></el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="手机号" style="flex: auto;width: 45%;">
                <el-input  v-model="addTableList.phone"></el-input>
              </el-form-item>
              <el-form-item
                prop="email"
                label="邮箱"
                :rules="[
                  { required: true, message: '请输入邮箱地址', trigger: 'blur' },
                  { type: 'email', message: '请输入正确的邮箱地址', trigger: ['blur', 'change'] }
                ]"
                style="flex: auto;width: 45%;"
              >
                <el-input v-model="addTableList.email"></el-input>
              </el-form-item>
              <el-form-item label="用户类型"  style="flex: auto;width:45%">
                <el-select v-model="customerType.customerTypeName" placeholder="请选择类型" @change="userTypeChange(customerType.customerTypeName)">
                  <el-option
                    v-for="item in customerType "
                    :label="item.customerTypeName"
                    :value="item.customerTypeKey"
                    :key="item.customerTypeKey"
                  ></el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="用户情况"  style="flex: auto;width:45%">
                <el-select v-model="SituationName" placeholder="请选择用户情况" >
                  <el-option
                    v-for="item in situations"
                    :label="item.SituationName"
                    :value="item.SituationId"
                  ></el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="用户状态"  style="flex: auto;width:45%">
                <el-select v-model="addTableList.userState" placeholder="请选择用户状态">
                  <el-option label="正常" value="0"></el-option>
                  <el-option label="暂停" value="1"></el-option>
                  <el-option label="锁定" value="2"></el-option>
                </el-select>
              </el-form-item>

              <el-form-item>
                <el-button type="primary" @click="submitForm(addTableList)">立即创建</el-button>
                <el-button @click="resetForm(addTableList)">取消</el-button>
              </el-form-item>
            </el-form>
          </el-main>
        </el-container>

      </el-dialog>
      <!--删除用户-->
      <el-dialog title="删除提示" :visible.sync="delDialogTableVisible" style="width: 120%">
        <p style="margin-top: -50px">确认要删除选中的人员吗？</p>
        <el-select v-model="value" placeholder="请选择" @change="delChange(value)">
          <el-option
            v-for="item in options"
            :key="item.value"
            :label="item.label"
            :value="item.value">
          </el-option>
        </el-select>
        <div class="del-box">
          <el-button type="success" @click="delAbolish">取消</el-button>  <el-button type="danger" @click="delSure">确认</el-button>
        </div>
      </el-dialog>
    </div>

</template>

<script>
  import API from '@/api/api_subscriber'
    export default {
        name: "index",
      data(){
          var validatePass = (rule, value, callback) => {
            if (value === '') {
              callback(new Error('请输入密码'));
            } else {
              if (this.ruleForm2.checkPass !== '') {
                this.$refs.ruleForm2.validateField('checkPass');
              }
              callback();
            }
          };
          return{
            dialogTableVisible: false,
            delDialogTableVisible: false,
            batchInDialogTableVisible: false,
            batchOutDialogTableVisible: false,
            setDepartmentManagerVisible: false,
            delChooseChange: false,
            currentPage: 1,
            step: 0,
            filterText: '',
            restaurants: [],
            getUserSelectState: '',
            timeout:  null,
            club: {
              name: '天津市第二南开中学'
            },
            userType: '',
            state: true,
            multipleSelection: [],
            tableData: [],
            situations: [{
                SituationId: 12,
                SituationName: "在职"
              }],
            situations1:[],
            situations2:[],
            situations3:[],
            SituationName: '',
            customerType: [{
              customerTypeName: "教师",
              customerTypeKey: 4,
              },
              {
                customerTypeName: "学生",
                customerTypeKey: 3,
              },
            ],
            //customerTypeName: '',
            rules: {
              username: [
                { required: true, message: '请输入用户名称', trigger: 'blur' },
                { min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur' }
              ],
              realname: [
                { required: true, message: '请输入用户姓名', trigger: 'blur' },
                { min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur' }
              ],
              email: [
                { required: true, message: '请输入邮箱地址', trigger: 'blur' },
                { required: true, type: 'email', message: '请输入正确的邮箱地址', trigger: ['blur', 'change'] }
              ],
              region: [
                { required: true, message: '请选择性别', trigger: 'change' }
              ],
            },
            data2: [
              {
                id:0,
                label: '天津市第二南开学校',
                children: [
                  {
                    id: 1,
                    label: '行政',
                    children: [{
                      id: 4,
                      label: '教务处',
                      children: [{
                        id: 9,
                        label: '教务处下属部门1'
                      }, {
                        id: 10,
                        label: '教务处下属部门2'
                      }]
                    }]
                  },
                  {
                    id: 2,
                    label: '德育处',
                    children: [{
                      id: 5,
                      label: '德育处下属部门1'
                    }, {
                      id: 6,
                      label: '德育处下属部门2'
                    }]
                  },
                  {
                    id: 3,
                    label: '总务处',
                    children: [{
                      id: 7,
                      label: '总务处1'
                    }, {
                      id: 8,
                      label: '总务处2'
                    }]
                  },
                  {
                    id: 1,
                    label: '人事部'
                  },
                  {
                    id: 12,
                    label: '初中部'
                  },
                  {
                    id: 13,
                    label: '小学部'
                  },
                  {
                    id: 14,
                    label: '校企'
                  }

                ]
              },

            ],
            defaultProps: {
              children: 'children',
              label: 'label'
            },
            rules2: {
              pass: [
                { validator: validatePass, trigger: 'blur' }
              ],
            },
            ruleForm2: {
              pass: '',
              checkPass: '',
              age: ''
            },
            addTableList: {
              username : '',
              realname: '',
              password: '',
              phone: '',
              email: '',
              userType: '',
              userState: '',
              userSituation: '',
              sex: [ '0', '1'],
            },
            tags: [
            ],
            batchData: [{
              batchValue: 'batchIn',
                label: '批量导入'
              },{
              batchValue: 'batchOut',
              label: '批量导出'
            }],
            batchValue: '',
            userTypebatchData:[
              {
                userTypebatchValue: '0',
                label: '老师'
              },{
                userTypebatchValue: '1',
                label: '学生'
              },
              {
                userTypebatchValue: '2',
                label: '家长'
              }
            ],
            userTypebatchValue: '',
            userStatebatchData: [
              {
                userStatebatchValue: '0',
                label: '正常'
              },
              {
                userStatebatchValue: '1',
                label: '锁定'
              }
            ],
            userStatebatchValue: '',
            bindbatchData: [
              {
                bindbatchValue: '0',
                label: '绑定'
              },
              {
                bindbatchValue: '1',
                label: '未绑定'
              }
            ],
            bindbatchValue:'',
            options: [{
              value: '0',
              label: '锁定'
            },{
              value: '1',
              label: '正常'
            }],
            value: "",
            userOptions: [{
              name: '选项1',
              label: '主要'
            }, {
              name: '选项2',
              label: '重要'
            }, {
              name: '选项3',
              label: '普通'
            }],
            name: '',
          }
      },
      watch: {
        filterText(val) {
          this.$refs.tree2.filter(val);
        }
      },
      mounted() {

      },
      methods: {
       //分页
        handleSelectionChange(val) {
          console.log(val)
          this.multipleSelection = val;
        },
        handleSizeChange(val) {
          console.log(`每页 ${val} 条`);
        },
        handleCurrentChange(val) {
          console.log(`当前页: ${val}`);
        },
        //权限
        handleEdit(index,row){
          console.log(index);
          console.log(row)
        },
        //删除
        handleDelete(multipleSelection){
            if(multipleSelection.length==0){
              this.$notify({
                title: '操作提示',
                message: '请选择用户',
                iconClass: 'el-icon-info',
                offset: 70
              });
            }else {
              this.delDialogTableVisible = true;
            }
        },
        //删除取消
        delAbolish(){
          this.delDialogTableVisible = false;
        },
        //删除用户状态选择
        delChange(value){
         this.delChooseChange = true;
        },
        //删除确定
        delSure(){
          if(this.delChooseChange){
            //TODO   获取删除接口
            let promise = {
                secUserId: '',
                secId: '',
                userId: '',
                level: '',
                primary: '',
                isShow: 1,
                modifier: "",
                creator: ""
            }
            API.deleteUser(promise).then((res)=>{
              console.log(res.data);

            })
            console.log(this.tableData);
            console.log(this.multipleSelection);
            for(var i=0;i<this.multipleSelection.length;i++){
              let index = this.tableData.findIndex(d => d.userId === this.multipleSelection[i].userId);
              this.tableData.splice(index, 1);
              console.log(index+"下标")
            }
            this.delDialogTableVisible = false;
            console.log(this.tableData)
          }else {
            this.$notify({
              title: '操作提示',
              message: '请选择用户状态',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }

        },
        //显示添加弹层
        hanleAdd(){
          this.dialogTableVisible = true;
          console.log(666);
          API.getUserTypeSitua().then((res)=>{
            console.log(res.data);
            let arr = [];
            res.data.forEach(item =>{
              console.log(item);
              let promise = {};
              promise.customerTypeName = item.name;
              promise.customerTypeKey = item.usertype;
              arr.push(promise);
            });
            this.situations1 = res.data[0].situations;
            this.situations2 = res.data[1].situations;
            this.situations3 = res.data[2].situations;
            console.log(this.situations1);
            console.log(709)
            this.customerType = arr;
            console.log(arr)
          })
        },
        //选择用户类型
        userTypeChange(val){
          console.log(val);
          if(val===0){
            this.SituationName = '';
            this.situations = this.situations1;
          }else if(val===1){
            this.SituationName = '';
            this.situations = this.situations2;
          }else if(val===2){
            this.SituationName = '';
            this.situations = this.situations3
          }
        },
        //添加提交
        submitForm(value){
          console.log(value)
          if(value.sex === ""){
            this.$notify({
              title: '操作提示',
              message: '请选择性别',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }else if(value.userType === ""){
            this.$notify({
              title: '操作提示',
              message: '请选择用户类型',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }else  if(value.userSituation === ""){
            this.$notify({
              title: '操作提示',
              message: '请选择用户情况',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }else if(value.userState == ""){
            this.$notify({
              title: '操作提示',
              message: '请选择用户状态',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }else {
            let user = JSON.parse(sessionStorage.getItem('user'));
            console.log("用户")
            console.log(user)
            let promise ={
              sectionId:6,
              userId: 1,
              password:"WBQ123456",
              realname: value.realname,
              username: value.username,
              usertype: value.userType,
              userSituation: value.userSituation,
              phone: value.phone,
              email: value.email
            }
            //TODO 调用添加用户接口
            API.addUser(promise).then((res)=>{
              console.log(res)
              console.log(value)
              console.log(999);
              console.log(promise)
              if(res.code===1){
                promise.userName = promise.username;
                promise.user_primary = this.club.name;
                if(promise.usertype=="0" ){
                  promise.usertype = "老师"
                }else if(promise.usertype=="1"){
                  promise.usertype = "学生"
                }else if(promise.usertype=="2"){
                  promise.usertype = "家长"
                }
                if(promise.userSituation === 0){
                  promise.locked = "正常"
                }else if(promise.userSituation === 1){
                  promise.locked = "锁定"
                } else if(promise.userSituation === 2){
                    promise.locked = "暂停"
                }
                this.tableData.push(promise);
                console.log(this.tableData)
                this.dialogTableVisible  = false;
                this.$message({
                  message: '添加成功',
                  type: 'success'
                });
              }else {
                this.$notify.error({
                  title: '错误',
                  message: res.data[0].errorMsg
                });
              }
            })

          }
        },
        //添加取消
        resetForm (value){
         this.dialogTableVisible  = false;
        },
        //查看
        handleShow(index,value){
          console.log(index);
          console.log(value);
        },
        //批量导出/导出
        batchChange(value){
          if(value=="batchIn"){
            this.batchInDialogTableVisible = true;
            this.batchOutDialogTableVisible = false;
          }else if(value=="batchOut"){
            this.batchOutDialogTableVisible = true;
            this.batchInDialogTableVisible = false;
          }
          console.log(value)
        },
        //第一步的下一步
        nextStep1(){
         this.step = 1;
        },
        //第一步的上一步
        lastStep1(){
          this.step = 0;
          this.batchOutDialogTableVisible = false
        },
        //第2步的上一步
        lastStep2(){
          this.step = 0;
        },
        //第二步的下一步
        nextStep2(){
          this.step = 2;
        },
        //第3步的下一步
        lastStep3(){
          this.step = 0;
        },
        //第3步的上一步
        nextStep3(){
          this.batchOutDialogTableVisible = false;
          this.step = 0;
        },
        //部门组织搜索过滤
        filterNode(value, data) {
          if (!value) return true;
          return data.label.indexOf(value) !== -1;
        },
        //批量导出组织树渲染
        renderTree(h, { node, data, store }){
          return (
            <span level={(()=>{return node.level})()} id={(()=>{return data.id})()} style="flex:1;display:flex;align-items:center;justify-content:space-between;font-size:14px;padding-right:8px;position:relative;">
            <span>
            <i class="el-icon-document" style="color:#F7D774;margin-right:.3em;"></i>
          { node.label }
        </span>
          <span class="tree-btns" style="position:absolute;left:0;top:-3px;">
            <el-button size="mini" type="text" on-click={ () => this.getNode(node) } style="padding:10px 90px;z-index:999;"></el-button>
            </span>
            </span>
        );
        },
        //获取批量导出节点并添加到导出的部门
        getNode(node){
          console.log(888)
          if(this.tags.length < 1){
            let addChoseData = {
              name : node.label,
              type: "",
              id: node.id
            }
            console.log(node);
            this.tags.push(addChoseData);
          }else{
            console.log(666)
            let flag = '';
            this.tags.forEach(item =>{
              if(item.id == node.id){
                this.$notify.error({
                  title: '错误',
                  message: '您已选择该部门'
                });
                let index = this.tags.findIndex(d => d.id === node.id);
                this.tags.splice(index, 1);
               return  flag = false;
               console.log(1)
              }else {
                console.log(0)
                return flag =  true
              }
            });
            console.log(flag)
            if(flag === true){
              let addChoseData = {
                name : node.label,
                type: "",
                id: node.id
              }
              console.log("aaa");
              this.tags.push(addChoseData);
            }
          }
        },
        //批量导出取消已选节点
        handleClose(tag) {
          this.tags.splice(this.tags.indexOf(tag), 1);
        },
        //调用列表
        callMethod (node,store) {
          console.log(node)
          console.log("调研")
          let promise = {
            pageNum: '0',
            pageSize: '10',
            level: '1',
            secId: '3'
          }
          API.getOrgationInfo(promise).then((res)=>{
            console.log(res.data);
              res.data.forEach(item =>{
                if(item.locked== 0){
                  item.locked = "正常"
                }else if(item.user_locked === 1){
                  item.locked = "锁定"
                }
              })
            this.tableData = res.data;
          })
          this.club = node.data;
        },
        //设置部门主管
        setDepartmentManager(){
          if(this.multipleSelection.length==0){
            this.$notify({
              title: '操作提示',
              message: '请选择用户',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }else{
            console.log(this.multipleSelection)
            this.userType = this.multipleSelection[0].usertype
            this.setDepartmentManagerVisible = true;
          }

        },
        //设置部门主管确定
        setManeger(){
          console.log(666);
          console.log(this.multipleSelection);
          let promise = {
            secId: '',
            userId: '',
            level: '',
            modifier: '',
            creator: ''
          }
          API.setPrincipal(promise).then((res)=>{
            console.log(res);
          })

        },
        //设置部门主管取消
        resetManeger(){
          //console.log(777);
          this.setDepartmentManagerVisible = false;
        },
        //搜索用户信息
        getUserselect(value){
          let promise = {
            search: value,
            secId: 7
          }
          console.log(promise)
           API.getUserselect(promise).then((res)=>{
             console.log(res);
             if(res.code===1){
               this.tableData = res.data;
               res.data.forEach(item =>{
                 if(item.locked === 0){
                   item.locked = "正常"
                 }else if(item.user_locked === 1){
                   item.locked = "锁定"
                 }
                 if(item.usertype=="0" ){
                   item.usertype = "老师"
                 }else if(item.usertype=="1"){
                   item.usertype = "学生"
                 }else if(item.usertype=="2"){
                   item.usertype = "家长"
                 }
               })
                console.log("查询成功")
             }
           })
        }

      }
    }
</script>

<style scoped>
  .content-box{
    line-height: 40px;
    background: #fff;
    text-align: center;
  }
  .title-box{
    text-align: left;
    border-bottom: 1px solid #dfdfdf;
    margin-bottom: 10px;
  }
  .el-table td, .el-table th{
    text-align: center;
  }
  .content-box-left{
    border: 1px solid #5daf34;
    margin-right: 20px;
  }
  .content-box-right{
    border: 1px solid #6a005d;
  }
  .image{
    width: 100px;
    height: 100px;
    border-radius: 100%;
    background: orange;
    border: none;
    margin-top: 20px;
  }
  .del-box{
    margin-top: 20px;
    border-top:1px solid #dfdfdf;
    padding-top: 20px;
    box-sizing: border-box;
  }
  .batch-out-row{
    font-size: 20px;
    font-weight: 600;
    margin: 10px 0;
  }
  .batch-out-content-aside{
    border: 1px solid #dfdfdf;
    width: 300px;
    padding-bottom: 40px;
  }
  .batch-out-content-main{
    border: 1px solid #dfdfdf;
    margin-left: 60px;
  }
  .el-icon-close{
    float: right;
    margin-right: 40px;
  }
  .stateRed{
    color: #F56C6C;
  }
  .stateGreen{
    color: #13ce66;
  }
</style>
