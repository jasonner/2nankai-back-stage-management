<template>
    <div class="content-box">
      <div v-if="!lookDetail">
        <!--折叠-->
        <el-collapse accordion style="margin-bottom: 20px">
          <el-collapse-item style="text-align: left">
            <!--部门栏目-->
            <template slot="title">
              <el-breadcrumb separator-class="el-icon-arrow-right">
                <el-breadcrumb-item style="margin-top: 20px;color: #000" v-if="showLevel1">{{club.levelName1}}</el-breadcrumb-item>
                <el-breadcrumb-item style="margin-top: 20px;color: #000" v-if="showLevel2">{{club.levelName2}}</el-breadcrumb-item>
                <el-breadcrumb-item style="margin-top: 20px;color: #000" v-if="showLevel3">{{club.levelName3}}</el-breadcrumb-item>
                <el-breadcrumb-item style="margin-top: 20px;color: #000" v-if="showLevel4">{{club.levelName4}}</el-breadcrumb-item>
                <!--<el-breadcrumb-item style="margin-top: 20px;color: #000"> ({{tableData.length}}人)</el-breadcrumb-item>-->
              </el-breadcrumb>
            </template>
            <!--批量处理-->
            <div style="display: flex">
              <div style="flex: auto;text-align: left;">
                <el-button type="primary"  @click="hanleAdd">添加成员</el-button>
                <el-button type="primary" @click="setDepartmentManager">设置主管</el-button>
                <el-button type="primary" @click="setClass">设置部门</el-button>
                <el-button type="primary">消息发送</el-button>
                <el-button type="primary" @click="handleDelete(multipleSelection)">批量删除</el-button>
              </div>
              <div style="text-align: right; flex: auto">
                <el-select v-model="value" placeholder="状态修改" @change="userStateChange(value)" style="width: 120px;">
                  <el-option
                    v-for="item in options"
                    :key="item.value"
                    :label="item.label"
                    :value="item.value"
                  >
                  </el-option>
                </el-select>
                <!--批量导入/导出-->
                <el-select v-model="batchValue" @visible-change="batchChange(batchValue)" placeholder="批量导入/导出" style="width: 140px;">
                  <el-option
                    v-for="item in batchData"
                    :key="item.batchValue"
                    :label="item.label"
                    :value="item.batchValue"
                  >
                  </el-option>
                </el-select>
              </div>
            </div>
          </el-collapse-item>
        </el-collapse>
        <!--搜索-->
        <div style="text-align: right">
          <el-input
            v-model="getUserSelectState"
            placeholder="请输入账号,姓名,手机号,邮箱进行搜索"
            style="width: 340px"
          ></el-input>
          <el-button type="primary" style="margin-left: 20px" @click="getUserselect(getUserSelectState,'userName')">搜索</el-button>
        </div>
        <!--批量导入弹层-->
        <el-dialog title="批量导入" :visible.sync="batchInDialogTableVisible">

          <el-upload
        class="upload-demo"
        ref="upload"
          :data="dataexcel"
        action="https://jsonplaceholder.typicode.com/posts/"
        >
        <el-select v-model="value" placeholder="选择上传类型" @change="" style="float:left;">
               <el-option
            v-for="item in modeloptions"
            :key="item.value"
            :label="item.label"
            :value="item.value">
          </el-option>
            </el-select>
        <el-button slot="trigger" size="small" type="primary">选取文件</el-button>
        <el-button style="margin-left: 10px;" size="small" type="success" @click="submitUpload">导入</el-button>
        <div slot="tip" class="el-upload__tip">只能上传.xls文件，且不超过500kb</div>
      </el-upload>
           <div style="border-top: 1px solid #dfdfdf; padding-top: 20px;box-sizing: border-box">

            <el-button type="primary" ><a style="color:#fff;text-decoration: none;" href="http://192.168.1.123:8080/zkhzupmserver/api/Execl/exportTemplate?type=0">下载教师模板</a></el-button>
            <el-button type="primary" ><a style="color:#fff;text-decoration: none;" href="http://192.168.1.123:8080/zkhzupmserver/api/Execl/exportTemplate?type=1">下载学生模板</a></el-button>
            <el-button type="primary" ><a style="color:#fff;text-decoration: none;" href="http://192.168.1.123:8080/zkhzupmserver/api/Execl/exportTemplate?type=2">下载家长模板</a></el-button>


          </div>


        </el-dialog>
        <!--批量导出弹层-->
        <el-dialog title="批量导出" :visible.sync="batchOutDialogTableVisible">
          <el-steps :active="step" simple>
            <el-step title="步骤 1" icon="el-icon-edit"></el-step>
            <el-step title="步骤 2" icon="el-icon-upload"></el-step>
            <el-step title="步骤 3" icon="el-icon-picture"></el-step>
          </el-steps>
          <!--第一步-->
          <div v-if="step===0">
            <div class="batch-out-row">选择导出范围</div>
            <div style="display: flex;width: 100%;font-weight: 600">
              <p style="flex: auto; text-align:left">部门选择</p>
              <p style="flex: auto; text-align:left;margin-left: 80px;">已选择部门</p>
            </div>
            <el-container style="width: 100%">
              <el-aside width="200px;" class="batch-out-content-aside">
                <el-input
                  placeholder="请您输入部门进行搜索"
                  v-model="filterText"
                  style="width: 95%; padding: 10px 0"
                >
                </el-input>

                <el-tree
                  class="filter-tree"
                  :data="data2"
                  :props="defaultProps"
                  tooltip-effect="dark"
                  :highlight-current="true"
                  :default-expanded-keys="[1]"
                  node-key="id"
                  :filter-node-method="filterNode"
                  ref="tree2"
                  :render-content="renderTree"
                  style="margin-top: 10px"
                >
                </el-tree>
              </el-aside>
              <el-main class="batch-out-content-main" style="line-height: 40px;text-align: left">
                <el-tag
                  v-for="tag in tags"
                  :key="tag.name"
                  closable
                  :type="tag.type"
                  @close="handleClose(tag)"
                  class="el-icon-document"
                  style="width: 100%;padding-left: 60px;box-sizing: border-box"
                >
                  22{{tag.name}}
                </el-tag>

              </el-main>
            </el-container>
            <el-row style="border-top: 1px solid #dfdfdf;padding-top: 20px;margin-top: 20px">
              <el-button type="danger" @click="lastStep1">取消</el-button>
              <el-button type="primary" @click="nextStep1">下一步</el-button>
            </el-row>
          </div>
          <!--第二步-->
          <div v-if="step===1">
            <div class="batch-out-row">验证管理员身份</div>
            <el-form :model="ruleForm2" status-icon :rules="rules2" ref="ruleForm2" label-width="100px" class="demo-ruleForm">
              <el-form-item label="密码" prop="pass">
                <el-input  placeholder="请输入管理员密码来验证身份" type="password" v-model="ruleForm2.pass" auto-complete="off"></el-input>
              </el-form-item>
            </el-form>
            <el-row style="border-top: 1px solid #dfdfdf;padding-top: 20px;margin-top: 20px">
              <el-button type="danger" @click="lastStep2">上一步</el-button>
              <el-button type="primary" @click="nextStep2('ruleForm2')">下一步</el-button>
            </el-row>
          </div>
          <!--第三步-->
          <div v-if="step===2">
            <div class="batch-out-row">确认您的选择</div>
            <el-main class="batch-out-content-main" style="line-height: 40px;text-align: left">
                <el-tag
                  v-for="tag in tags"
                  :key="tag.name"
                  closable
                  :type="tag.type"
                  @close="handleClose(tag)"
                  class="el-icon-document"
                  style="width: 100%;padding-left: 60px;box-sizing: border-box"
                >
                  {{tag.name}}
                </el-tag>

              </el-main>
            <el-row style="border-top: 1px solid #dfdfdf;padding-top: 20px;margin-top: 20px">
              <el-button type="danger" @click="lastStep3">返回第一步</el-button>
              <el-button type="primary" @click="nextStep3">确定</el-button>
            </el-row>
          </div>
        </el-dialog>
        <!--设置部门主管弹层-->
        <el-dialog title="设置主管" :visible.sync="setDepartmentManagerVisible" width="400px">
            <div style="text-align: left;line-height: 20px">
              <p>当前身份</p>
              <h2><input disabled="true" v-model="userType" type="text" style="border: none;font-size: 20px;font-weight: 600;background: #fff"> </h2>
              <p>选择身份</p>
              <el-select v-model="name" placeholder="请选择" @change="selectUserType(name)">
                <el-option
                  v-for="item in userOptions"
                  :key="item.name"
                  :label="item.label"
                  :value="item.name">
                </el-option>
              </el-select>
            </div>
          <el-row style="padding-top: 20px;margin-top: 20px">
            <el-button type="success" @click="setManeger">确认</el-button>
            <el-button type="danger" @click="resetManeger">取消</el-button>
          </el-row>
        </el-dialog>
        <!--设置部门弹层-->
        <el-dialog title="部门选择" :visible.sync="setDepartmentVisible">
          <div style="display: flex;width: 100%;font-weight: 600">
            <p style="flex: auto; text-align:left">部门选择</p>
            <p style="flex: auto; text-align:left;margin-left: 80px;">已选择部门</p>
          </div>
          <el-container style="width: 100%">
            <el-aside width="200px;" class="batch-out-content-aside">
              <el-input
                placeholder="请您输入部门进行搜索"
                v-model="filterText"
                style="width: 95%; padding: 10px 0"
              >
              </el-input>

              <el-tree
                class="filter-tree"
                :data="data2"
                :props="defaultProps"
                tooltip-effect="dark"
                :highlight-current="true"
                :default-expanded-keys="[1]"
                node-key="id"
                :filter-node-method="filterNode"
                ref="tree2"
                :render-content="renderClassTree"
                style="margin-top: 10px"
              >
              </el-tree>
            </el-aside>
            <el-main class="batch-out-content-main" style="line-height: 40px;text-align: left">
              <el-tag
                v-for="tag in classTags"
                :key="tag.name"
                closable
                :type="tag.type"
                @close="handleClose(tag)"
                class="el-icon-document"
                style="width: 100%;padding-left: 60px;box-sizing: border-box"
              >
                {{tag.name}}<span v-if="tag.index==1">主要部门</span>
              </el-tag>

            </el-main>

          </el-container>
          <el-row style="padding-top: 20px;margin-top: 20px">
            <el-button type="success" @click="sureSetClass">确认</el-button>
            <el-button type="danger" @click="delSetClass">取消</el-button>
          </el-row>
        </el-dialog>
        <!-- 用户列表-->
        <el-table
          ref="multipleTable"
          :data="tableData"
          stripe
          border
          show-header
          highlight-current-row
          tooltip-effect="dark"
          style="width: 100%;margin-top: 20px;text-align: left"
          @selection-change="handleSelectionChange">
          <el-table-column
            type="selection"
            label="全选"
            width="40"
          >
          </el-table-column>
          <el-table-column
            prop="username"
            label="用户名"
            sortable
            width="100"
            >

          </el-table-column>
          <el-table-column
            prop="realname"
            label="姓名"
            sortable
            >
          </el-table-column>
          <el-table-column
            prop="usertype"
            label="用户类型"
            :filters= "[{text: '教师', value: '教师'}, {text: '学生', value: '学生'}, {text: '家长', value: '家长'}]"
            :filter-method="filterHandler"
            sortable
            >
            <template slot-scope="scope">
              <el-popover
              placement="right"
              width="400"
              trigger="click"
            >
              <el-table :data = "gridData"  v-if="gridData.length>0">
                <el-table-column width="150" property="username" label="用户名"></el-table-column>
                <el-table-column width="100" property="realname" label="姓名"></el-table-column>
                <el-table-column width="300" property="usertype" label="用户类型"></el-table-column>
                <el-table-column width="150" property="phone" label="手机号"></el-table-column>
                <el-table-column width="100" property="user_situation" label="用户状态"></el-table-column>
              </el-table>
              <div slot="reference" class="name-wrapper;">
                <el-tag size="medium" style="background: transparent;border:none;color: #000">{{ scope.row.usertype }}</el-tag>
              </div>
            </el-popover>
            </template>
          </el-table-column>
          <el-table-column
            prop="user_primary"
            label="所属部门"
            sortable
            >
            <template slot-scope="scope">
              <el-popover trigger="hover" placement="top">
                <div v-for="item in scope.row.section">
                  <p>{{ item.sectionname }}</p>
                </div>
                <div slot="reference" class="name-wrapper;">
                  <el-tag size="medium" style="background: transparent;border:none;color: #000">{{ scope.row.user_primary }}</el-tag>
                </div>
              </el-popover>
            </template>
          </el-table-column>
            <el-table-column
              prop="phone"
              label="手机号"
              sortable
              >
            </el-table-column>
            <el-table-column
              :filters= "[{text: '正常', value: '正常'}, {text: '锁定', value: '锁定'}, {text: '停用', value: '停用'}]"
              :filter-method="filterHandler"
              prop="locked"
              sortable
              label="用户状态"
              style="color: #F56C6C"
              :class="state?'stateRed':'stateGreen'"
            >
            </el-table-column>
            <el-table-column label="操作">
            <template slot-scope="scope">
              <el-button
                size="mini"
                style="color: #862a7a;border: none;padding: 0; margin-left: 10px"
                class="iconfont icon-bianji"
                @click="handleShow(scope.$index, scope.row)"><span @click="$emit('update:showDlg',true)">编辑</span></el-button>
              <el-button
                size="mini"
                class="iconfont icon-chakan"
                style="color: #862a7a;border: none;padding: 0;margin-left: 10px"
                @click="lookUserDetail(scope.$index, scope.row)"><span>查看</span></el-button>
              <el-button
                size="mini"
                class="iconfont icon-xiaoxi"
                style="color: #862a7a;border: none;padding: 0; margin-left: 10px"
                @click="handleEdit(scope.$index, scope.row)">消息</el-button>
              <el-button
                size="mini"
                class="iconfont icon-quanxianguanli"
                style="color: #862a7a;border: none; padding: 0;margin-left: 10px"
                @click="handleEdit(scope.$index, scope.row)">权限</el-button>
            </template>
          </el-table-column>
        </el-table>
        <!--分页-->
        <div style="margin-top: 20px">
          <div class="block">
            <el-pagination
              @size-change="handleSizeChange"
              @current-change="handleCurrentChange"
              :current-page="currentPage"
              :page-sizes="[10, 20, 30, 40]"
              :page-size="10"
              layout="total, sizes, prev, pager, next, jumper"
              :total="total">
            </el-pagination>
          </div>
        </div>
        <!--添加用户-->
        <el-dialog title="添加成员" :visible.sync="dialogTableVisible" width="70%" top="5vh">
          <div style="display: flex;margin-top: -40px;">
            <div style="flex: 1;" class="content-box-left">
              <img src="../../../../static/userLogin.png" alt="" class="image">
             <!-- <p style="margin: 0">UID</p>
              <div style="overflow: hidden;white-space: nowrap;text-overflow: ellipsis;">{{UID}}</div>
              <el-button type="primary" @click="showUid">{{showUIDText}}</el-button>-->
              <el-select v-model="customerType.customerTypeName" style="width:80%"  placeholder="选择类型" @change="userTypeChange(customerType.customerTypeName)">
                <el-option
                  v-for="item in customerType "
                  :label="item.customerTypeName"
                  :value="item.customerTypeKey"
                  :key="item.customerTypeKey"
                ></el-option>
              </el-select>
            </div>
            <div  style="flex:4;"  class="content-box-right">
              <el-form :model="addTableList" style="display: flex;flex-wrap: wrap"  :rules="rules" ref="addTableList" label-width="100px">
               <!-- <el-form-item label="姓名"  style="flex: auto;width: 30%;">-->
                <div style="margin-bottom: 10px;text-align: left;">
                  <el-input  v-model="addTableList.realname" @blur="userIsExistChange(addTableList.realname)" style="width:100px;margin-right: 20px;float:left;" placeholder="姓名"></el-input>
                   <div style="float: left;">账户名称 : <span style="display:inline-block;min-width:130px;">{{addTableList.username}}</span></div>
                    <!-- </el-form-item>-->
                    <div style="float: left;margin-left:15px;">
                    <span style="display:inline-block;min-width:160px;"> 密码 : {{addTableList.password}}</span>
                    <el-button
                      style="padding:6px 7px"
                      v-clipboard:copy="addTableList.username+'/'+addTableList.password"
                      v-clipboard:success="onCopy"
                      v-clipboard:error="onError"
                      v-if="addTableList.password!=''"
                      type="primary"
                    >复制</el-button>
                  </div>
                </div>
                <div style="margin-bottom: 10px;">
                  <el-input  v-model="addTableList.username" v-if="addTableList.userType!='0' " @change="changeRegisterNumber(addTableList.username)"  style="width:100%;margin-right: 20px" placeholder="请输入学籍号"></el-input>
                </div>
              <!--  </el-form-item>-->
               <!-- <el-form-item label="手机号" style="flex: auto;width: 45%;">-->
                <div style="display: flex; text-align: left">
                  <div style="flex: auto;">
                    <el-input  style="width: 60%;"  v-model="addTableList.phone" placeholder="手机号"></el-input>
                    <el-button :type="bindphone? 'success' : 'primary' " style="margin-left: 10px;padding: 9px 8px" @click="addbindPhone">{{bindphone?'已绑定':'绑定'}}</el-button>
                  </div>
               <!-- </el-form-item>-->
               <!-- <el-form-item
                  prop="email"
                  label="邮箱"
                  :rules="[
                    { required: true, message: '请输入邮箱地址', trigger: 'blur' },
                    { type: 'email', message: '请输入正确的邮箱地址', trigger: ['blur', 'change'] }
                  ]"
                  style="flex: auto;width: 45%;"
                >-->
                  <div style="flex: auto;">
                    <el-input style="flex: auto; width: 60%;"  v-model="addTableList.email" placeholder="邮箱号"></el-input>
                    <el-button :type="bindemail? 'success' : 'primary' " style="margin-left: 10px;padding: 9px 8px" @click="addbindEmail">{{bindemail?'已绑定':'绑定'}}</el-button>
                  </div>
                </div>
              <!--  </el-form-item>-->
                <div style="margin-top: 20px;text-align: left">
              <!--  <el-form-item label="用户情况"  style="flex: auto;width:45%">-->
                  <el-select style="width: 22%" v-model="SituationName" placeholder="用户情况" @change="userSituations(SituationName)" >
                    <el-option
                      v-for="item in situations"
                      :label="item.SituationName"
                      :value="item.SituationId"
                    ></el-option>
                  </el-select>
               <!-- </el-form-item>-->
                <!--<el-form-item label="姓别"  style="flex: auto;width:30%">-->
                <el-select v-model="addTableList.sex" style="width: 22%;margin:0 10px"  placeholder="用户性别">
                  <el-option label="男" value="0"></el-option>
                  <el-option label="女" value="1"></el-option>
                </el-select>
                <!-- </el-form-item>-->

               <!-- <el-form-item label="用户状态"  style="flex: auto;width:45%">-->
                  <el-select style="width: 22%" v-model="addTableList.userState" placeholder="用户状态">
                    <el-option label="正常" value="0"></el-option>
                    <el-option label="冻结" value="1"></el-option>
                    <el-option label="锁定" value="2"></el-option>
                  </el-select>
                  <!--  </el-form-item>-->
                  <!-- <el-form-item label="管理员"  style="flex: auto;width:45%">-->
                  <el-select style="width: 22%;margin-left: 10px" v-model="addTableList.ismaster" @change="ismasterChange(addTableList.ismaster)" v-if="addTableList.userType=='0'" placeholder="非管理员">
                    <el-option label="管理员" value="1"></el-option>
                    <el-option label="非管理员" value="0"></el-option>
                  </el-select>
                  <!--  </el-form-item>-->
                </div>
              </el-form>
            </div>
          </div>
          <div>
            <div style="display: flex;width: 100%;font-weight: 600">
              <p style="flex: auto; text-align:left">部门选择</p>
              <p style="flex: auto; text-align:left;margin-left: 80px;">已选择部门</p>
            </div>
            <el-container style="width: 100%">
              <el-aside width="200px;" class="batch-out-content-aside">
                <el-input
                  placeholder="请您输入部门进行搜索"
                  v-model="filterText"
                  style="width: 95%; padding: 10px 0"
                >
                </el-input>

                <el-tree
                  class="filter-tree"
                  :data="data2"
                  :props="defaultProps"
                  :highlight-current= true
                  node-key="id"
                  :default-expanded-keys="[1]"
                  tooltip-effect="dark"
                  :filter-node-method="filterNode"
                  ref="tree2"
                  :render-content="renderTree"
                  style="margin-top: 10px"
                >
                </el-tree>
              </el-aside>
              <el-main class="batch-out-content-main" style="line-height: 40px;text-align: left">
                <el-tag
                  v-for="tag in tags"
                  :key="tag.name"
                  closable
                  :type="tag.type"
                  @close="handleClose(tag)"
                  class="el-icon-document"
                  style="width: 100%;padding-left: 60px;box-sizing: border-box"
                >
                  {{tag.name}}
                </el-tag>

              </el-main>
            </el-container>
            <el-row style="border-top: 1px solid #dfdfdf;padding-top: 20px;margin-top: 20px">
              <el-button type="primary" @click="submitForm(addTableList)">立即创建</el-button>
              <el-button @click="resetForm(addTableList)">取消</el-button>
            </el-row>

          </div>
        </el-dialog>
        <!--删除用户-->
        <el-dialog title="删除提示" :visible.sync="delDialogTableVisible" style="width: 120%">
          <p style="margin-top: -50px">确认要删除选中的人员吗？</p>
          <el-select v-model="value" placeholder="请选择" @change="delChange(value)">
            <el-option
              v-for="item in options"
              :key="item.value"
              :label="item.label"
              :value="item.value">
            </el-option>
          </el-select>
          <div class="del-box">
            <el-button type="success" @click="delAbolish">取消</el-button>  <el-button type="danger" @click="delSure">确认</el-button>
          </div>
        </el-dialog>
      </div>
      <!--查看用户详细-->
      <div v-if="lookDetail">
        <el-container>
          <el-aside width="300px" class="showDetailAside">
              <img src="../../../../static/userLogo.gif" alt="" class="image">
              <div>{{userDetalData.realname}}</div>
              <!--邮箱-->
              <div class="three-party-binding" style="border: none;height: 40px">
                <i class="iconfont icon-youxiang" style="color: #862a7a;float: left;" v-if="userDetalData.email && userDetalData.email != '' "> {{userDetalData.email}}</i>
                <i class="iconfont icon-youxiang" style="color: #862a7a;float: left;" v-if="!userDetalData.email||userDetalData.email == '' "></i><span v-if="!userDetalData.email||userDetalData.email == '' " style="margin-left: 20px;float: left">无</span>
                <span style="color: #00ff00;float: right" v-if="userDetalData.bindemail">已绑定</span>
                <span style="color: #dd6161;float: right" v-if="!userDetalData.bindemail|| userDetalData.bindemail==''">未绑定</span>
              </div>
              <!--手机号-->
              <div class="three-party-binding" style="border: none;height: 40px">
                <i class="iconfont icon-shouji" style="color: #862a7a;float: left;" v-if="userDetalData.phone && userDetalData.phone != '' "> {{userDetalData.phone}}</i>
                <i class="iconfont icon-shouji" style="color: #862a7a;float: left;" v-if="!userDetalData.phone||userDetalData.phone == '' "></i><span v-if="!userDetalData.phone||userDetalData.phone == '' " style="margin-left: 20px;float: left">无</span>
                <span style="color: #00ff00;float: right" v-if="userDetalData.bindphone">已绑定</span>
                <span style="color: #dd6161;float: right" v-if="!userDetalData.bindphone|| userDetalData.bindphone==''">未绑定</span>
              </div>
          </el-aside>
          <el-main class="showDetailMain">
            <div style="text-align: left;margin-left: 20px; "><i style="color: #6a005d" class="iconfont icon-yonghufangkeshu"></i>{{userDetalData.realname}}</div>
            <ul style="text-align: left;line-height: 30px">
              <li>用户类型 : {{userDetalData.usertype}}</li>
              <li>所属部门 : {{userDetalData.user_primary}}</li>
              <li>用户情况 : {{userDetalData.user_situation}}</li>
              <li>用户状态 : {{userDetalData.locked}}</li>
            </ul>
          </el-main>
        </el-container>
        <div> <!--第三方绑定-->
          <div class="third" style="text-align: left" >
            <h4>第三方绑定 </h4>
            <ul class="third-box">
              <li style="list-style: none;">
                <img style="vertical-align: middle" src="../../../../static/qq.png"/>
                <span style="margin-left: 40px">无</span>
                <span style="color: #dd6161;margin-left: 40px">未绑定</span>
              </li>
              <li style="list-style: none;margin-top: 20px">
                <img  style="vertical-align: middle" src="../../../../static/weixin.png"/>
                <span style="margin-left: 40px">无</span>
                <span style="margin-left: 40px">未绑定</span>
              </li>
              <li style="list-style: none; margin-top: 20px">
                <img style="vertical-align: middle" src="../../../../static/weibo.png"/>
                <span style="margin-left: 40px">无</span>
                <span style="margin-left: 40px">未绑定</span>
              </li>
            </ul>
          </div>
        </div>
        <div @click="resetMsg"><el-button type="primary">确认返回</el-button></div>
      </div>
    </div>

</template>

<script>
  import API from '@/api/api_subscriber';
  import UserAPI from '@/api/api_user';
  import HASH from '@/assets/hash';
  import pinying from '@/assets/pingyin';
  import bus from '../../../assets/componentBridge';
    export default {
        name: "index",
      data(){
          var validatePass = (rule, value, callback) => {
            if (value === '') {
              callback(new Error('请输入密码'));
            } else {

              callback();
            }
          };
          return{
          	user:{},
            lookDetail: false,
            userDetalData:'',
          	modeloptions:[{
	          value: '0',
	          label: '教师'
	        }, {
	          value: '1',
	          label: '学生'
	        },{
	          value: '2',
	          label: '家长'
	        }],
	        dataexcel:{},
//	        fileList: [{name: 'food.jpeg',url:''}],
          	bindemail:false,
          	bindphone:false,
            dialogTableVisible: false,
            delDialogTableVisible: false,
            batchInDialogTableVisible: false,
            batchOutDialogTableVisible: false,
            setDepartmentManagerVisible: false,
            setDepartmentVisible:false,
            delChooseChange: false,
            currentPage: 1,
            step: 0,
            filterText: '',
            randomnum:'',//随机数
            UID: '',
            showUIDText: '显示',
            restaurants: [],
            getUserSelectState: '',
            secId: '',
            total: 0,
            timeout:  null,
            showLevel1: false,
            showLevel2: false,
            showLevel3:  false,
            showLevel4: false,
            user_primary: '教务处',
            club: {
              levelName1: '天津市第二南开中学',
              levelName2: '',
              levelName3: ''
            },
            gridData: [],
            userType: '0',
            state: true,
            multipleSelection: [],
            tableData: [],
            situations: [{
              SituationId: 12,
              SituationName: "在职"
            }],
            situations1:[],
            situations2:[],
            situations3:[],
            SituationName: '',
            customerType: [{
              customerTypeName: "教师",
              customerTypeKey: 4,
              },
              {
                customerTypeName: "学生",
                customerTypeKey: 3,
              },
            ],
            customerTypeName: '',
            rules: {
              username: [
                { required: true, message: '请输入用户名称', trigger: 'blur' },
                { min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur' }
              ],
              realname: [
                { required: true, message: '请输入用户姓名', trigger: 'blur' },
                { min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur' }
              ],
              email: [
                { required: true, message: '请输入邮箱地址', trigger: 'blur' },
                { required: true, type: 'email', message: '请输入正确的邮箱地址', trigger: ['blur', 'change'] }
              ],
              region: [
                { required: true, message: '请选择性别', trigger: 'change' }
              ],
            },
            data2: [],//栏目树列表
            defaultProps: {
              children: 'children',
              label: 'name'
            },
            rules2: {
              pass: [
                { validator: validatePass, trigger: 'blur' }
              ],
            },
            ruleForm2: {
              pass: '',
              checkPass: '',
              age: ''
            },
            addTableList: {
              username : '',
              realname: '',
              password: '',
              phone: '',
              email: '',
              userType: '',
              userState: '',
              userSituation: '',
              ismaster:'0',
              bindemail:'',
              bindphone:'',
              sex: [ '0', '1'],
            },
            tags: [
            ],
            classTags: [],
            batchData: [{
              batchValue: 'batchIn',
                label: '批量导入'
              },{
              batchValue: 'batchOut',
              label: '批量导出'
            }],
            batchValue: '',
            options: [{
              value: '0',
              label: '锁定'
            },
              {
              value: '1',
              label: '正常'
            }],
            value: "",
            userOptions: [{
              name: '1',
              label: '主要'
            }, {
              name: '0',
              label: '重要'
            }, {
              name: '2',
              label: '普通'
            }],
            name: '',
          }
      },
      watch: {
        filterText(val) {
          this.$refs.tree2.filter(val);
        }
      },
      mounted() {
      	this.user = JSON.parse(sessionStorage.getItem('user'));
        API.orgationTree({}).then((res)=>{
          this.data2 = res.data
          console.log(res.data);
        })
      },
      methods: {
          //全选
        handleSelectionChange(val) {
          console.log(val)
          this.multipleSelection = val;
        },
        //分页
        handleSizeChange(val) {
          console.log(`每页 ${val} 条`);
          let promise = {
            pageNum: this.currentPage,
            pageSize: val,
            level: 1,
            secId: this.secId
          }
          API.getOrgationInfo(promise).then((res)=>{
            console.log(res.data);
            if(res.data.length >= 1){
              res.data.forEach(item =>{
                if(item.locked== 0){
                  item.locked = "正常"
                }else if(item.locked === 1){
                  item.locked = "锁定"
                }
              })
              this.tableData = res.data;
              this.gridData = res.data[0].linkMen;
              this.total = res.total
            }else {
              this.tableData = res.data =  res.data
            }
          })
        },
        handleCurrentChange(val) {
          console.log(val);
          console.log(`当前页: ${val}`);
          this.currentPage = val;
          let promise = {
            pageNum: val,
            pageSize: '10',
            level: 1,
            secId: this.secId
          }
          API.getOrgationInfo(promise).then((res)=>{
            console.log(res.data);
            if(res.data.length >= 1){
              res.data.forEach(item =>{
                if(item.locked== 0){
                  item.locked = "正常"
                }else if(item.locked === 1){
                  item.locked = "锁定"
                }
              })
              this.tableData = res.data;
              this.gridData = res.data[0].linkMen;
              this.total = res.total
            }else {
              this.tableData = res.data =  res.data
            }
          })
        },
        showUid(){
          if(this.showUIDText=="显示"){
            let user = JSON.parse(sessionStorage.getItem('user'));
            this.UID = user.uid
            this.showUIDText = "隐藏"
          }else if(this.showUIDText=="隐藏"){
            this.UID = '';
            this.showUIDText = "显示"
          }

        },
        //权限
        handleEdit(index,row){
          console.log(index);
          console.log(row)
        },
        //删除
        handleDelete(multipleSelection){
            if(multipleSelection.length==0){
              this.$notify({
                title: '操作提示',
                message: '请选择用户',
                iconClass: 'el-icon-info',
                offset: 70
              });
            }else {
              this.delDialogTableVisible = true;
            }
        },
        //删除取消
        delAbolish(){
          this.delDialogTableVisible = false;
        },
        //删除用户状态选择
        delChange(value){
         this.delChooseChange = true;
        },
        //删除确定
        delSure(){
          console.log(this.multipleSelection);
          let user = JSON.parse(sessionStorage.getItem('user'));
          if(this.delChooseChange){
            //TODO   获取删除接口
            let promise = {
                secUserId: this.multipleSelection[0].secUserId,//用户组织表Id
                secId: this.secId,
                userId: this.multipleSelection[0].userId,
                isShow: 1,//1是删除，0是显示
                modifier: user.userId,
                creator: user.userId
            }
            API.deleteUser(promise).then((res)=>{
              console.log(res.data);

            })
            for(var i=0;i<this.multipleSelection.length;i++){
              let index = this.tableData.findIndex(d => d.secUserId === this.multipleSelection[i].secUserId);
              this.tableData.splice(index, 1);
              console.log(index+"下标")
            }
            this.delDialogTableVisible = false;
            console.log(this.tableData)
          }else {
            this.$notify({
              title: '操作提示',
              message: '请选择用户状态',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }

        },
        //显示添加弹层
        hanleAdd(){
          this.tags = [];
          this.dialogTableVisible = true;
          console.log(666);
          API.getUserTypeSitua().then((res)=>{
            console.log(res.data);
            let arr = [];
            res.data.forEach(item =>{
              console.log(item);
              let promise = {};
              promise.customerTypeName = item.name;
              promise.customerTypeKey = item.usertype;
              arr.push(promise);
            });
            this.situations1 = res.data[0].situations;
            this.situations2 = res.data[1].situations;
            this.situations3 = res.data[2].situations;
            console.log(this.situations1);
            console.log(709)
            this.customerType = arr;
            console.log(arr)
          })
        },
        //选择用户类型
        userTypeChange(val){
          console.log(val);
          this.addTableList.userType = val;
          if(val===0){
            this.addTableList.userSituation = '1';
            this.addTableList.username = '';
            this.SituationName = '在职'
            this.situations = this.situations1;
          }else if(val===1){
            this.addTableList.username = '';
            this.addTableList.userSituation = '9';
            this.SituationName = '在校'
            this.situations = this.situations2;
          }else if(val===2){
            this.addTableList.username = '';
            this.addTableList.userSituation = '9';
            this.SituationName = '在校'
            this.situations = this.situations3
          }
        },
        //选择用户情况
        userSituations(val){
          console.log(val);
          this.addTableList.userSituation = val;
        },
        //用户姓名选择
        userIsExistChange(userName,type){
            console.log(userName);
           let p = pinying.ConvertPinyin(userName+"");
           if(this.addTableList.userType === 0){
             this.addTableList.username ='T'+ p;
           }else if(this.addTableList.userType === 1){
             this.addTableList.username ='S'+ p;
           }else if(this.addTableList.userType === 2){
             this.addTableList.username ='P'+ p;
           }
           this.addUserName(p,type);
        },
        //选择用户名称
        addUserName(userName,type){
          if(type=='student'){

          }else {
            var num="";
            for(var i=0;i<4;i++){
              num+=Math.floor(Math.random()*10)
            }
            if(this.addTableList.username!=''){
              this.randomnum = num;
              this.addTableList.password = userName + num ;
            }else {
              this.addTableList.username = '';
            }
          }
          let promise = {
            userName: userName
          }
          API.userIsExist(promise).then((res)=>{
            console.log(res.data);
            let i=0;
            if(res.data===true){
              i++;
              let num = '0'+ i;
              this.$notify({
                title: '操作提示',
                message: '该用户已存在',
                iconClass: 'el-icon-info',
                offset: 70
              });
            }
            this.addTableList.username = this.addTableList.username+ num;
          })
        },
        //复制密码
        onCopy: function (e) {
          console.log('你刚刚复制: ' + e.text);
          this.$message({
            message: '复制成功',
            type: 'success'
          });
        },
        onError: function (e) {
          this.$message.error('复制失败');
        },
        //学籍号添加用户
        changeRegisterNumber(val){
          this.userIsExistChange(val,'student')
        },
        //添加提交
        submitForm(value){
          console.log(value)
          if(value.sex === ""){
            this.$notify({
              title: '操作提示',
              message: '请选择性别',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }else if(value.userType){
            this.$notify({
              title: '操作提示',
              message: '请选择用户类型',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }else  if(value.userSituation === ""){
            this.$notify({
              title: '操作提示',
              message: '请选择用户情况',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }else if(value.userState == ""){
            this.$notify({
              title: '操作提示',
              message: '请选择用户状态',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }else if(this.tags.length<1){
            this.$notify({
              title: '操作提示',
              message: '请选择部门',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }else {
            let user = JSON.parse(sessionStorage.getItem('user'));
            console.log("用户");
            console.log(this.tags);
            let sectionIds = '';
            this.tags.forEach(item=>{
              sectionIds += item.id+ '-'
            })
            console.log(sectionIds)
            let promise ={
              sectionIds: sectionIds,
              userId: user.userid,
              userpasswd: HASH.hex_sha1(this.addTableList.password),
              username: value.realname,
              account: value.username,
              utypeid: value.userType,
              ismaster: this.addTableList.ismaster,
              randomnum:this.randomnum,
              bindemail:true,
              bindphone: false,
              itemid: value.userSituation,
              phone: value.phone,
              email: value.email,
              sex: value.sex
            }
            //// 调用添加用户接口
            API.addUser(promise).then((res)=>{
              console.log(res)
              console.log(value)
              console.log(999);
              console.log(promise)
              if(res.code===1){
                let promise = {
                  pageNum: '0',
                  pageSize: '1',
                  level: 1,
                  secId: 3
                }
                this.dialogTableVisible  = false;
                this.addTableList = {};
                this.$message({
                  message: '添加成功',
                  type: 'success'
                });
                API.getOrgationInfo(promise).then((res)=>{
                  console.log(res.data);
                  if(res.data.length>0){
                    res.data.forEach(item =>{
                      if(item.locked== 0){
                        item.locked = "正常"
                      }else if(item.user_locked === 1){
                        item.locked = "锁定"
                      }
                    })
                    this.tableData = res.data;
                  }
                })
              }else {
                this.$notify.error({
                  title: '错误提示',
                  message: res.data[0].errorMsg
                });
              }
            })
          }
        },
        //添加取消
        resetForm (value){
          this.tableData = [];
         this.dialogTableVisible  = false;
        },
        //编辑
        handleShow(index,value){
          console.log(index);
          console.log(value);
          bus.$emit('userData',value);
        },
        //查看
        lookUserDetail(index,value){
          this.lookDetail = true;
          console.log(index,value)
          this.userDetalData = value;
        },
        //下载模板
//      downloadModel(value){
//      	console.log(value)
//      	window.location.href = 'http://192.168.1.123:8080/zkhzupmserver/api/Execl/exportTemplate?type='+value;
//      },
        //导入
        submitUpload(){
        	console.log(this.$refs.upload)
        	this.dataexcel = {
        		file:this.$refs.upload,
        		type:1,
        		sectionId:2,
        		userId:94
        	}
        	this.$refs.upload.submit();
//      	API.insertInfo(this.dataexcel).then((res)=>{
//      		console.log(res);
//      	})
//      	this.$refs.upload.submit();
        },
        //批量导出/导出
        batchChange(value){
          if(value=="batchIn"){
            this.batchInDialogTableVisible = true;
            this.batchOutDialogTableVisible = false;
          }else if(value=="batchOut"){
            this.batchOutDialogTableVisible = true;
            this.batchInDialogTableVisible = false;
          }
          console.log(value)
        },
        //第一步的下一步
        nextStep1(){
         if(sessionStorage.getItem('yz')==1){
    		this.step = 2;
    	 }else{
    		this.step = 1;
    	 }

        },
        //第一步的上一步
        lastStep1(){
          this.step = 0;
          this.batchOutDialogTableVisible = false
        },
        //第2步的上一步
        lastStep2(){
          this.step = 0;
        },
        //第二步的下一步
        nextStep2(formData){
            this.$refs[formData].validate((valid) => {
	            if (valid) {
		          	let promise={
		        		old:this.user.userpasswd,
		        		now:HASH.hex_sha1(this.ruleForm2.pass),
		        		salt:this.user.salt
	        		}
		        	API.yzpassword(promise).then((res)=>{
		        		if(res.code==1){
		        			if(res.data){
		        				this.$notify.info({
				                  title: '成功',
				                  message: '身份验证通过'
				                });
		        				sessionStorage.setItem('yz',1)
		        				this.step = 2;
		        			}else{
		        				sessionStorage.setItem('yz',0)
		        				this.$notify.error({
				                  title: '失败',
				                  message: '身份验证失败'
				                });
		        			}
		        		}
		        	})

		        }
	      	})

        },
        //第3步的上一步
        lastStep3(){
          this.step = 0;
        },
        //第3步的下一步
        nextStep3(){
        	let sectionIds = '';
            this.tags.forEach(item=>{
              sectionIds += item.id
            })
            let secId = sectionIds;

            window.location.href = 'http://192.168.1.123:8080/zkhzupmserver/api/Execl/export?secId='+ secId
//      	window.location .href = 'http://192.168.1.123:8080/zkhzupmserver/api/Execl/exportPatriarch?secId='+ secId
        },
        //部门组织搜索过滤
        filterNode(value, data) {
          if (!value) return true;
          return data.label.indexOf(value) !== -1;
        },
        //批量导出组织树渲染
        renderTree(h, { node, data, store }){
          return (
            <span level={(()=>{return node.level})()} id={(()=>{return data.id})()} style="flex:1;display:flex;align-items:center;justify-content:space-between;font-size:14px;padding-right:8px;position:relative;">
            <span>
            <i class="icontree iconfont icon-wenjian" style="margin-right:.3em;"></i>
          { node.label }
        </span>
          <span class="tree-btns" style="position:absolute;left:0;top:-3px;">
            <el-button size="mini" type="text" on-click={ () => this.getNode(node,store) } style="padding:10px 90px;z-index:999;"></el-button>
            </span>
            </span>
        );
        },
        //获取批量导出节点并添加到导出的部门
        getNode(node){
          console.log(888);
          console.log(node.data);
          if(this.tags.length < 1){
            let addChoseData = {
              name : node.label,
              type: "",
              id: node.data.id,
              pid: node.data.pid
            }
            console.log(node);
            console.log(addChoseData);
            this.tags.push(addChoseData);
          }else{
            console.log(666)
            let flag = '';
            this.tags.forEach(item =>{
              if(item.id == node.data.id || item.id == node.data.pid){
                this.$notify.error({
                  title: '错误',
                  message: '您已选择该部门'
                });
                let index = this.tags.findIndex(d => d.id === item.id);
                this.tags.splice(index, 1);
                console.log("下标"+index)
               return  flag = false;
              }else {
                console.log(0)
                return flag =  true
              }
            });
            console.log(flag)
            if(flag === true){
              let addChoseData = {
                name : node.label,
                type: "",
                id: node.data.id,
                pid: node.data.pid
              }
              console.log(addChoseData);
              console.log("aaa");
              let flags = false
              this.tags.forEach(item=>{
                if(addChoseData.id == item.pid){
                  this.$notify.error({
                    title: '错误',
                    message: '不能同时选择父子部门'
                  });
                }else {
                  return flags = true;
                }
              })
              if(flags){
                console.log(this.tags)
                this.tags.push(addChoseData);
              }
            }
          }
        },
        //批量导出取消已选节点
        handleClose(tag) {
          this.tags.splice(this.tags.indexOf(tag), 1);
        },
        //调用列表
        callMethod (node,store) {
          console.log(node)
          console.log("调研");
          console.log(this.multipleSelection)
          this.secId = node.key;
          //this.secId = 19;

          let promise = {
            pageNum: '0',
            pageSize: '10',
            level: 1,
            secId: this.secId
          }
          API.getOrgationInfo(promise).then((res)=>{
            console.log(res.data);
            if(res.data.length >= 1){
              res.data.forEach(item =>{
                if(item.locked== 0){
                  item.locked = "正常"
                }else if(item.locked === 1){
                  item.locked = "锁定"
                }
              })
              this.tableData = res.data;
              this.gridData = res.data[0].linkMen;
              this.total = res.total
            }else {
              this.tableData = res.data =  res.data
            }
          })
          console.log(node.level)
          console.log(this.tableData);
          if(node.level === 1){
            this.club.levelName1 = node.label;
            this.showLevel1 = true;
            this.showLevel2 = false;
            this.showLevel3 =  false;
            this.showLevel4 = false;
          }else  if(node.level === 2){
            this.showLevel1 = true;
            this.showLevel2 = true;
            this.showLevel3 =  false;
            this.showLevel4 = false;
            this.club.levelName2 = node.label;
            this.club.levelName1 = node.parent.label;
          }else  if(node.level === 3){
            this.showLevel1 = true;
            this.showLevel2 = true;
            this.showLevel3 =  true;
            this.showLevel4 = false;
            this.club.levelName3 = node.label;
            this.club.levelName2 = node.parent.label;
            this.club.levelName1 = node.parent.parent.label;
          } else if(node.level === 4){
            this.showLevel1 = true;
            this.showLevel2 = true;
            this.showLevel3 =  true;
            this.showLevel4 = true;
            this.club.levelName4 = node.label;
            this.club.levelName3 = node.parent.label;
            this.club.levelName2 = node.parent.parent.label;
            this.club.levelName1 = node.parent.parent.parent.label;
          }


        },
        //设置部门主管
        setDepartmentManager(){
          if(this.multipleSelection.length==0){
            this.$notify({
              title: '操作提示',
              message: '请选择用户',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }else{
            console.log(this.multipleSelection);
            let flag = '';
            this.multipleSelection.forEach(item=>{
              if(item.usertype != '教师'){
                 flag = 'false';
              }
            })
            if(flag != 'false'){
              this.userType = this.multipleSelection[0].usertype
              this.setDepartmentManagerVisible = true;
            }else{
              this.$notify({
                title: '操作提示',
                message: '请选择教师',
                iconClass: 'el-icon-info',
                offset: 70
              });
            }

          }

        },
        //选择部门主管的身份
        selectUserType(val){
          console.log(val);
          this.multipleSelection.selectUserType = val;
          console.log(this.multipleSelection)
        },
        //设置部门主管确定
        setManeger(){
          console.log(666);
          console.log(this.multipleSelection);
          let user = JSON.parse(sessionStorage.getItem('user'));
          console.log("用户")
          console.log(user);
          console.log(this.multipleSelection);
          let promise = {
            secId: this.secId,//部门
            userId: this.multipleSelection[0].userId,
            userLevel: this.multipleSelection.selectUserType,
            modifier: user.userId,
            creator: user.userId
          }
          console.log(promise)
          API.setPrincipal(promise).then((res)=>{
            console.log(res);
            if(res.code===1){
              this.$message({
                message: '设置成功',
                type: 'success'
              });
            }else {
              this.$message('设置失败');
            }
          }).then( ()=>{
            this.setDepartmentManagerVisible = false;
          })

        },
        //设置部门主管取消
        resetManeger(){
          //console.log(777);
          this.setDepartmentManagerVisible = false;
        },
        //批量导出组织树渲染
        renderClassTree(h, { node, data, store }){
          return (
            <span level={(()=>{return node.level})()} id={(()=>{return data.id})()} style="flex:1;display:flex;align-items:center;justify-content:space-between;font-size:14px;padding-right:8px;position:relative;">
            <span>
            <i class="icontree iconfont icon-wenjian" style="margin-right:.3em;"></i>
          { node.label }
        </span>
          <span class="tree-btns" style="position:absolute;left:0;top:-3px;">
            <el-button size="mini" type="text" on-click={ () => this.getNodeClass(node,store) } style="padding:10px 90px;z-index:999;"></el-button>
            </span>
            </span>
        );
        },
        //获取批量导出节点并添加到导出的部门
        getNodeClass(node){
          console.log(888);
          console.log(node.data);
          if(this.classTags.length < 1){
            let addChoseData = {
              name : node.label,
              type: "",
              id: node.data.id,
              pid: node.data.pid
            }
            console.log(node);
            console.log(addChoseData);
            this.classTags.push(addChoseData);
          }else{
            console.log(666)
            let flag = '';
            this.classTags.forEach(item =>{
              if(item.id == node.data.id || item.id == node.data.pid){
                this.$notify.error({
                  title: '错误',
                  message: '您已选择该部门'
                });
                let index = this.classTags.findIndex(d => d.id === item.id);
                this.classTags.splice(index, 1);
                console.log("下标"+index)
                return  flag = false;
              }else {
                console.log(0)
                return flag =  true
              }
            });
            console.log(flag)
            if(flag === true){
              let addChoseData = {
                name : node.label,
                type: "",
                id: node.data.id,
                pid: node.data.pid
              }
              console.log(addChoseData);
              console.log("aaa");
              let flags = false
              this.classTags.forEach(item=>{
                if(addChoseData.id == item.pid){
                  this.$notify.error({
                    title: '错误',
                    message: '不能同时选择父子部门'
                  });
                }else {
                  return flags = true;
                }
              })
              if(flags){
                console.log(this.classTags)
                this.classTags.push(addChoseData);
              }
            }
          }
        },
        //设置部门弹层
        setClass(){
          console.log('设置部门');
          console.log(this.multipleSelection);
          if(this.multipleSelection.length==0){
            this.$notify({
              title: '操作提示',
              message: '请选择用户',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }else{
            console.log(this.multipleSelection);
            let flag = '';
            this.multipleSelection.forEach(item=>{
              if(item.usertype != '教师'){
                flag = 'false';
              }
            })
            if(flag != 'false'){
              this.userType = this.multipleSelection[0].usertype
              this.setDepartmentVisible = true;
            }else{
              this.$notify({
                title: '操作提示',
                message: '请选择教师',
                iconClass: 'el-icon-info',
                offset: 70
              });
            }
          }
        },
        //设置部门确定
        sureSetClass(){
          let user = JSON.parse(sessionStorage.getItem('user'));
          let classSectionIds = '';
          console.log(this.multipleSelection);
          console.log(this.classTags);
          this.classTags.forEach( item => {
            classSectionIds += item.id + '-'
          })
          let userIds = '';
          this.multipleSelection.forEach( item => {
            userIds += item.userId + '-'
          })
         let promise = {
           userids: classSectionIds,
           sections: userIds,
           userId: user.userid
         }
          API.userSecAdd(promise).then((res)=>{
            console.log(res);
            if(res.code===1){
              this.$message({
                message: '设置成功',
                type: 'success'
              });
            }else {
              this.$message('设置失败');
            }
          }).then( ()=>{
            this.setDepartmentVisible = false;
          })
        },
        //设置部门取消
        delSetClass(){
          this.setDepartmentVisible = false;
          this.tags = [];
        },
        //搜索用户信息
        getUserselect(value,type){
          console.log(value,type)
          let promise = {}
          if(type === 'userName'){
             promise = {
              search: value,
              secId: this.secId
            }

          }else if(type === 'userTYPE'){
             promise = {
               secId: this.secId,
               usertype: value,
               locked: this.locked,
               Bind: this.Bind
            }
          }else if(type==='userState'){
             promise = {
               secId: this.secId,
               usertype: this.usertype,
               locked: value,
               Bind: this.Bind
            }
          }else if(type === 'bind'){
            promise = {
              secId: this.secId,
              usertype: this.usertype,
              locked: this.locked,
              Bind: value
            }
          }
          console.log(promise)
          API.getUserselect(promise).then((res)=>{
            console.log(res);
            if(res.code===1){
              this.tableData = res.data;
              res.data.forEach(item =>{
                if(item.locked === 0){
                  item.locked = "正常"
                }else if(item.user_locked === 1){
                  item.locked = "锁定"
                }
                if(item.usertype=="0" ){
                  item.usertype = "老师"
                }else if(item.usertype=="1"){
                  item.usertype = "学生"
                }else if(item.usertype=="2"){
                  item.usertype = "家长"
                }
              })
              console.log("查询成功")
            }
          })
        },
        //修改用户状态
        userStateChange(val){
          console.log(val);
          console.log('用户状态修改')
          console.log(this.multipleSelection)
          if(this.multipleSelection.length==0){
            this.$notify({
              title: '操作提示',
              message: '请选择用户',
              iconClass: 'el-icon-info',
              offset: 70
            });
          }else {
            this.$confirm('修改用户状态, 是否继续?', '提示', {
              confirmButtonText: '确定',
              cancelButtonText: '取消',
              type: 'warning'
            }).then(() => {
              let userIds = '';
              this.multipleSelection.forEach( item => {
                userIds += item.userId + '-'
              })
             let promise ={
               userIds: userIds
             }
              API.userUplist(promise).then((res)=>{
                if(res.code==1){
                  this.$notify({
                    title: '提示信息',
                    message: '修改成功',
                    type: 'warning'
                  });
                }else{
                  this.$notify({
                    title: '警告',
                    message: res.data,
                    type: 'warning'
                  });
                }
              })
            }).catch(() => {
              this.$message({
                type: 'info',
                message: '已取消删除'
              });
            });
          }
        },
        //管理员设置
        ismasterChange(val){
          this.addTableList.ismaster = val;
        },
        //用户类型筛选
        filterHandler(value, row, column) {
          console.log(value,row,column)
          const property = column['property'];
          console.log(property)
          return row[property] === value;
        },
        //添加绑定用户手机号
        addbindPhone(){
          if(this.addTableList.phone==''){
            this.$notify.info({
              title: '消息',
              message: '请输入手机号'
            });
          }else {
            this.$confirm('绑定用户手机号, 是否继续?', '提示', {
              confirmButtonText: '确定',
              cancelButtonText: '取消',
              type: 'warning'
            }).then(() => {
              this.$message({
                type: 'success',
                message: '已绑定手机号'
              });
              this.bindphone = true;
              this.addTableList.bindphone = true;
            }).catch(() => {
              this.$message({
                type: 'info',
                message: '已取消绑定'
              });
            });
          }

        },
        //添加用户绑定邮箱
        addbindEmail(){
          if(this.addTableList.email==''){
            this.$notify.info({
              title: '消息',
              message: '请输入邮箱号'
            });
          }else {
            this.$confirm('绑定用户邮箱, 是否继续?', '提示', {
              confirmButtonText: '确定',
              cancelButtonText: '取消',
              type: 'warning'
            }).then(() => {
              this.$message({
                type: 'success',
                message: '已绑定邮箱号'
              });
              this.bindemail = true;
              this.addTableList.bindemail = true;
            }).catch(() => {
              this.$message({
                type: 'info',
                message: '已取消绑定'
              });
            });
          }
        },
        //返回编辑
        resetMsg(){
            this.lookDetail = false;
        }
      }
    }
</script>

<style scoped>
  .content-box{
    line-height: 40px;
    background: #fff;
    text-align: center;
  }
  .title-box{
    text-align: left;
    border-bottom: 1px solid #dfdfdf;
    margin-bottom: 10px;
  }
  .el-table td, .el-table th{
    text-align: center;
  }
  .content-box-left{
    border: 1px solid #E5E5E5;
    margin-right: 20px;
    padding: 20px;
    border-radius: 5px;
    box-sizing: border-box;
  }
  .content-box-right{
    border: 1px solid #E5E5E5;
    border-radius: 5px;
    padding: 20px;
    box-sizing: border-box;
  }
  .image{
    width: 100px;
    height: 100px;
    border-radius: 100%;
    background: orange;
    border: none;
    margin-top: 20px;
  }
  .del-box{
    margin-top: 20px;
    border-top:1px solid #dfdfdf;
    padding-top: 20px;
    box-sizing: border-box;
  }
  .batch-out-row{
    font-size: 20px;
    font-weight: 600;
    margin: 10px 0;
  }
  .batch-out-content-aside{
    border: 1px solid #dfdfdf;
    width: 300px;
    padding-bottom: 40px;
  }
  .batch-out-content-main{
    border: 1px solid #dfdfdf;
    margin-left: 60px;
  }
  .showDetailAside,.showDetailMain{
    border: 1px solid #dfdfdf;
    border-radius: 5px;
    text-align: center;
    padding: 20px 10px;
    box-sizing: border-box;
  }
  .showDetailAside{
    /*用户头像*/
    .image{
      width: 80px;
      height: 80px;
      display: block;
      margin: 0 auto;
      margin-top: 40px;
    }
  }
  .showDetailMain{
    margin-left: 20px;
  }
  /*第三方绑定*/
  .third{
    overflow:hidden;
    border-radius:5px;
    padding:20px;
    float:left;
    border:1px solid #eee;
    width: 100%;
    margin:20px 0;
    box-sizing: border-box;
  .third-box{
    display: flex;
    flex-direction: column;
  li{
    flex: auto;
    line-height: 70px;
    list-style: none;
  img{
    vertical-align: middle;
  }
  span{
    text-align:center;
    display: inline-block;
    width: 195px;
  }
  .el-button{
    padding: 5px 10px;
  }
  }
  }
  }
  .el-icon-close{
    float: right;
    margin-right: 40px;
  }
  .labelClass{
    color: #F56C6C;
  }
  .stateGreen{
    color: #13ce66;
  }
</style>
