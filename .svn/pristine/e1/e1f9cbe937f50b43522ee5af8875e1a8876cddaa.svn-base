
<template>
    <el-container style="height: 100%">
	  	<el-aside :class="!isCollapse?'showSider':'hideSider'">
	  		<span class="logo"></span>
          <el-menu class="el-menu-vertical-demo" :default-active="$route.path" theme="dark" v-bind:router="true" @open="handleOpen" @close="handleClose" :collapse="isCollapse">
              <template v-for="(link,index) in $router.options.routes">

                  <el-menu-item :index="link.children[0].path" v-if="link.leaf&&link.menuShow">
                    <i :class="link.iconCls"></i>
                    <span slot="title">{{link.children[0].name}}</span>
                  </el-menu-item>
                  <el-submenu :index="index+''" v-else-if="!link.leaf&&link.menuShow">
                    <template slot="title">
                      <i :class="link.iconCls"></i>
                      <span>{{link.name}}</span>
                    </template>
                    <el-menu-item :index="term.path" v-for="term in link.children" v-if="term.menuShow">{{term.name}}</el-menu-item>
                  </el-submenu>
              </template>
          </el-menu>
	  </el-aside>
	  <el-container>
	    <el-header>
	    	<div class="header-top">
	    		  <el-col :span="12">
	            <i class="menu-icon" style="color:#fff;" @click="isCollapse = !isCollapse"></i>
	          </el-col>
	          <el-col :span="12" style="text-align:right">
	            	<span class="person"></span>
		          <el-dropdown trigger="click" @command="handleCommand">
                <span class="el-dropdown-link">
                  {{user.realname}}<i class="el-icon-arrow-down el-icon--right"></i>
                </span>
                <el-dropdown-menu slot="dropdown">
                  <router-link to="personInfo"><el-dropdown-item>个人资料</el-dropdown-item></router-link>
                  <el-dropdown-item command="editPass">修改密码</el-dropdown-item>
                  <el-dropdown-item command="loginout">退出</el-dropdown-item>
                </el-dropdown-menu>
              </el-dropdown>
			      </el-col>
	        </div>
	    </el-header>
	    <el-main>
          <el-breadcrumb separator-class="el-icon-arrow-right" style="margin:0px 0px 15px">
            <el-breadcrumb-item v-if="$route.name == $route.matched[0].name">{{$route.name}}1</el-breadcrumb-item>
            <el-breadcrumb-item v-else v-for="titleTerm in $route.matched">{{titleTerm.name}}</el-breadcrumb-item>
          </el-breadcrumb>

          <router-view/>

        </el-main>
	  </el-container>
    <el-dialog class="hint"
    title="提示"
    :visible.sync="centerDialogVisible"
    width="30%"
    center>
      <span style="margin:auto;">您确认退出当前登录吗？</span>
      <span slot="footer" class="dialog-footer">
        <el-button size="small" type="primary" @click="sureDel">确 定</el-button>
        <el-button size="small" @click="centerDialogVisible = false">取 消</el-button>
      </span>
      
    </el-dialog>
    <el-dialog title="修改密码" width="400px" @close="closeDialog('upPassword')" :visible.sync="dialogPasswordVisible" >
        <el-form :model="upPassword" status-icon :rules="rulesPassword" ref="upPassword" label-width="100px" class="demo-ruleForm">
          <el-form-item label="原密码"  prop="oldPwd">
            <el-input :type="oldPassword" v-model="upPassword.oldPwd"></el-input>
            <span @click.stop="changePasswordType('oldPassword')" class="password-eye  el-icon-view" ></span>
          </el-form-item>
          <el-form-item label="密码" prop="newPwd">
            <el-input :type="newPassword" v-model="upPassword.newPwd"></el-input>
            <span @click.stop="changePasswordType('newPassword')" class="password-eye  el-icon-view" ></span>
          </el-form-item>
          <el-form-item label="确认密码" prop="checkPass">
            <el-input :type="surePassword" v-model="upPassword.checkPass"></el-input>
            <span @click.stop="changePasswordType('surePassword')" class="password-eye  el-icon-view" ></span>
          </el-form-item>

        </el-form>
        <div slot="footer" class="dialog-footer">

          <el-button @click="dialogPasswordVisible = false">取 消</el-button>
          <el-button type="primary" @click="savePassword('upPassword')">确定修改</el-button>
        </div>
      </el-dialog>
		
		
		
		
		<el-dialog
	  title="请您完善信息"
	  :center="center"
	  :visible.sync="dialogBangding"
	  width="30%"
	  >
	  <span>为了您的账户安全建议您绑定手机号或者邮箱</span>
	  <span slot="footer" class="dialog-footer">
	    <el-button @click="dialogBangding = false">关闭</el-button>
	    <!--<el-button type="primary" @click="dialogBangding = false">确 定</el-button>-->
	  </span>
	 </el-dialog>
	
      <!--同意协议修改密码绑定微信开始-->
		<el-dialog
		 title="请您根据向导完成操作"
		 :center="center"
		  :visible.sync="dialogAgree"
		  width="50%"
		  :show-close="showClose"
		  :close-on-click-modal="closeModal"
		  :before-close="agreeClose">

		<el-steps :active="active" simple finish-status="success">
			  <el-step title="步骤一"></el-step>
			  <el-step title="步骤二"></el-step>
			  
		</el-steps>
		<div v-if="active==1" style="margin-top:30px;">
			  <h2>用户协议</h2>
			  <div style="height:300px;overflow-y:scroll;text-align:left;margin-bottom:20px;">
				{{userAgreement}}
				<div class="checkagree"><el-checkbox v-model="checkedAgree" @change="agreeChange">我已阅读并且同意此用户协议</el-checkbox></div>
	
			  </div>
	
			  <span slot="footer" class="dialog-footer">
			  	<el-button @click="notAgreeClose">残忍拒绝</el-button>
			    <el-button type="primary" @click="agreeClose" :disabled="agreedisabled">确 定</el-button>
			  </span>

		</div>

		  <div class="step-box" v-if="active==2">
		  	<h2>首次登录修改密码</h2>
		  	<el-form :model="upPassword" status-icon :rules="rulesPassword" ref="upPassword" label-width="100px" class="demo-ruleForm">
	          <el-form-item label="原密码" prop="oldPwd">
	            <el-input :type="oldPassword" v-model="upPassword.oldPwd" placeholder="请输入原密码"></el-input>
	          	<span @click.stop="changePasswordType('oldPassword')" class="password-eye  el-icon-view" ></span>
	          </el-form-item>
	          <el-form-item label="新密码" prop="newPwd" >
	            <el-input :type="newPassword" v-model="upPassword.newPwd" placeholder="新密码为6位以上，不能为纯数字，由数字和字母组成"></el-input>
	          	<span @click.stop="changePasswordType('newPassword')" class="password-eye  el-icon-view" ></span>
	          </el-form-item>
	          <el-form-item label="确认密码" prop="checkPass">
	            <el-input :type="surePassword" v-model="upPassword.checkPass" placeholder="请再次输入密码"></el-input>
	          	<span @click.stop="changePasswordType('surePassword')" class="password-eye  el-icon-view" ></span>
	          </el-form-item>
	       </el-form>
          	<el-button type="primary" @click="savePassword('upPassword')">确定</el-button>
          	<p style="text-align:left;font-size:12px;color:red;">为了您的账户安全，首次登录请修改密码</p>

		  </div>
		  
		  
		  <div class="step-box" v-if="active==3">
		  	<img src="../../static/finishsmile.png">
                <h1 style="color:#13CE66;">恭喜您已完成所有步骤</h1>
		  		<p>请您用新密码重新登录，建议您登录后在个人中心进行账号绑定，便于您找回密码</p>
		  	<el-button style="margin-top: 20px;" type="primary" @click="finishedFirst">确定</el-button>	
		  </div>
		</el-dialog>
    <!--同意协议结束 -->



	</el-container>
</template>

<script>

import {bus} from '@/bus/bus.js';
import API from '@/api/api_user';
import HASH from '@/assets/hash';
export default {
  name: 'home',
  data () {
  	 
    var validatePass = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('请输入密码'));
      } else if(!/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,}$/.test(value)){
      	callback(new Error('密码格式不正确'));
      }else if(value == this.upPassword.oldPwd){
      	callback(new Error('新密码不能与旧密码相同'));
      }else {
        if (this.upPassword.newPwd !== '') {
          this.$refs.upPassword.validateField('checkPass');
        }
        callback();
      }
    };
    var validatePass2 = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('请再次输入密码'));
      } else if (value !== this.upPassword.newPwd) {
        callback(new Error('两次输入密码不一致!'));
      } else {
        callback();
      }
    };
    var validatePhone = (rule,value,callback) =>{
    	if(value===''){
    		callback(new Error('此项不能为空！'))
    	}else if(/^[1][3,4,5,7,8][0-9]{9}$/.test(value)||/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\.[a-zA-Z0-9_-]{2,3}){1,2})$/.test(value)){
    		callback();

    	}else{
    		callback(new Error('格式不正确!'))
    	}

    };
    return {
      oldPassword: "password",
      newPassword: "password",
      surePassword: "password",
      list:[
        {name:'a'},
        {name:'b'},
        {name:'c'},
      ],
      user:{},
      userAgreement:'',
      dialogBangding:false,
      active: 1,
      isCollapse: false,
      message: 'hello!',
      centerDialogVisible:false,
      dialogPasswordVisible:false,
      showClose:false,
      closeModal:false,
 	  center:true,
      dialogAgree: false,
      checkedAgree: false,
      agreedisabled:true,
      upPassword:{
        userId:'',
        oldPwd:'',
        newPwd:'',
        checkPass:''
      },

      getYanzheng:{
      	inputPhone:''
      },
      // 是否禁用按钮
	  codeDisabled: false,
	  // 倒计时秒数
	  countdown: 60,
	  // 按钮上的文字
	  codeMsg: "获取验证码",
	  codeTs:'',
	  inputCode:'',
	  // 定时器
	  timer: null,
     exitInputPhone:false,
      rulesPassword:{
          oldPwd: [
            { required: true, message: '请输入旧密码', trigger: 'blur' }
          ],
          newPwd: [
            {required: true, validator: validatePass, trigger: 'blur' }
          ],
          checkPass: [
            { required: true,validator: validatePass2, trigger: 'blur' }
          ]
      },
      rulesYanzhengPhone:{
      	  inputPhone: [
            { required: true, validator: validatePhone, trigger: 'blur' }
          ]
      }

    }
  },
  created(){
      bus.$on('goto', (url) => {
        this.$router.push(url);
      })
  },
  computed:{

  },
  components:{

  },
  mounted(){
    this.user = JSON.parse(sessionStorage.getItem('user'));
    this.dialogAgree = sessionStorage.getItem('impower')==0?true:false;
    
    if(sessionStorage.getItem('impower')==1){//不是第一次登录，检测是否绑定
    	API.authenShow({userId:this.user.userId}).then((res)=>{
			if(res.code==1){//请求成功
				if(!res.data){//一个都没有绑定
					this.$router.push('/personInfo');
					this.$notify({
			          title: '操作提示',
			          message: '检测您未绑定任何账户，安全等级较低，建议您绑定个人信息',
			          iconClass: 'el-icon-info',
			          offset: 70
			        });
				}
			}else if(res.code==2){//未登录
				this.$router.push('/');
			}else{
				this.$notify({
		          title: '操作提示',
		          message: res.data,
		          iconClass: 'el-icon-info',
		          offset: 70
		        });
			}
      	})
    }else{
    	API.agreeShow({}).then((res)=>{
			if(res.code==1){
				this.userAgreement = res.data.agreement;
			}else if(res.code==2){//未登录
				this.$router.push('/');
			}else{
				
			}
				
      	})
    }
    
    
  },

  methods: {
      handleOpen(key, keyPath) {
        // console.log(key, keyPath);
      },
      handleClose(key, keyPath) {
        // console.log(key, keyPath);
      },
      sureDel(){
        API.logout({}).then((res)=>{
            console.log(res)
            this.$router.push('/');
//             sessionStorage.clear();
        })
      },
      // 点击右上角
      handleCommand(command) {
          if(command == 'loginout'){//退出
              this.centerDialogVisible= true;
          }else if(command == 'editPass'){//修改密码
              this.upPassword.userId = this.user.userId;
              this.dialogPasswordVisible=true;
          }
      },  
      closeDialog(form){
        this.$refs[form].resetFields();
      },

      //改变密码显示和隐藏的状态
      changePasswordType(type) {
        if(type==="oldPassword"){
          if(this.oldPassword == "password"){
            this.oldPassword = "text"
          }else if( this.oldPassword == "text"){
            this.oldPassword = "password"
          }
        }else if(type==="newPassword"){
          if(this.newPassword == "password"){
            this.newPassword = "text"
          }else if( this.newPassword == "text"){
            this.newPassword = "password"
          }
        }else {
          if(this.surePassword == "password"){
            this.surePassword = "text"
          }else if( this.surePassword == "text"){
            this.surePassword = "password"
          }
        }
      },
      
    savePassword(formName){
        this.$refs[formName].validate((valid) => {
          if (valid) {
            //密码加密
            let newPassword = {
              userId:this.user.userId,
              oldPwd:HASH.hex_sha1(this.upPassword.oldPwd),
              newPwd:HASH.hex_sha1(this.upPassword.newPwd)
            }
            console.log(newPassword)

            API.modifyPwd(newPassword).then((res)=>{
              if(res.code==1){
//              this.$notify({
//                title: '操作提示',
//                message: '恭喜您密码修改成功！',
//                iconClass: 'el-icon-info',
//                offset: 70
//              });
                this.dialogPasswordVisible = false;
                if(sessionStorage.getItem('impower')==0){
                	if (this.active++ > 3) this.active = 4;         	
	            }else{
	            	this.$router.push('/');
		          	this.$notify({
		              title: '操作提示',
		              message: '您已经成功修改了密码，请重新登录',
		              iconClass: 'el-icon-info',
		              offset: 70
		            });
	            }

              }else{
                this.$notify({
                  title: '操作提示',
                  message: res.data,
                  iconClass: 'el-icon-info',
                  offset: 70
                });

              }



            });
          }
        });
      },

    agreeChange(val){
    	val?this.agreedisabled=false:this.agreedisabled=true
    },
    notAgreeClose(){
      	this.$router.push('/');
//      sessionStorage.clear();

    },
    agreeClose(){
      	let agreeUser = {
              userId:this.user.userId,
              username:this.user.username,
              realname:this.user.realname,
              usertype:this.user.usertype,
              firstlogin:1
        }
      	API.updateUser(agreeUser).then((res)=>{

      		if (this.active++ > 3) this.active = 4;
      	})


		this.$notify({
          title: '操作提示',
          message: '欢迎您使用本系统',
          iconClass: 'el-icon-info',
          offset: 70
        });

      },
		submitFinished(){
			 if(this.inputCode==''){
			 	this.codeTs='验证码不能为空'
			 }else{
			 	if(this.exitInputPhone){
			 		if (this.active++ > 4) this.active = 5;
			 	}
			 }

		},
    getCode(formData) {
			this.$refs[formData].validate((valid) => {
	          	if (valid) {
	          		this.exitInputPhone=true;
	            	// 验证码60秒倒计时
					  if (!this.timer) {
					   	this.timer = setInterval(() => {
					   		if (this.countdown > 0 && this.countdown <= 60) {
					    		this.countdown--;
					    		if (this.countdown !== 0) {
					    			this.codeMsg = "重新发送(" + this.countdown + ")";
					    		} else {
						    		clearInterval(this.timer);
						    		this.codeMsg = "获取验证码";
						    		this.countdown = 60;
						    		this.timer = null;
						    		this.codeDisabled = false;
					    		}
					   		}
					    }, 1000)
					  }
	            }else{

	            }

			});
		},
		finishedFirst(){
			this.dialogAgree=false;
        	this.$router.push('/');
          	this.$notify({
              title: '操作提示',
              message: '您已经修改了密码，请重新登录',
              iconClass: 'el-icon-info',
              offset: 70
            }); 
		}




    }//method方法结束
}
</script>

<style scoped lang='scss'>
.checkagree{margin:20px 0;text-align:left;font-weight:700;}
.infoul{overflow:hidden;}
.eachinfo{float:left;width:33%;line-height:50px;text-align:left;}
.third-tools{width:60%;margin:0 auto;}
.third-tools li{width:33%;text-align:center;list-style:none;float:left;text-align:center;cursor:pointer;}
.third-tools li p{margin:5px 0;font-size:12px;}
.menu-icon{
	display:inline-block;
	width:20px;height:20px;margin-top:20px;cursor:pointer;
	background:url(../../static/menu-icon.png) no-repeat;
}
.header-top{
  text-align:left;
  .person{
    width:40px;
    height:40px;
    border-radius:100%;
    display:inline-block;
    overflow:hidden;
    vertical-align: middle;
    background-color:#fff;
    img{
      width:40px;
      height:40px;
    }
  }
}

.el-header, .el-footer {
    background-color: #942987;
    color: #333;
    text-align: center;
    line-height: 60px;
  }

  .el-aside {
    background-color: #6a005d;
    color: #333;
    text-align: left;
  }

  .el-main {
    background-color: #f3f3f3;
    color: #333;
    .main-contain{
      padding:15px;
      background-color:#fff;
      border-radius:8px;
    }
  }
  .main {
      display: -webkit-box;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex;
      position: absolute;
      top: 60px;
      width:100%;
      bottom: 0px;
      overflow: hidden;
    }
.el-submenu.is-active{
  background-color:#942987;
}

.el-menu-vertical-demo:not(.el-menu--collapse) {
    width: 200px;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    /*margin-top:20px;*/
  }
  .showSider{
    width:200px !important;
    transition:all 0.4s;
    .logo{
      width:100%;
      height:60px;
      line-height:60px;
      background:url(../../static/logo-open.png) center center no-repeat;
      background-size:88%;
      display: inherit;
      img{
        width:100%;
        height:60px;
      }
    }
    .el-menu--collapse{
      /*margin-top:20px;*/
    }
  }
  .hideSider{
    width:60px !important;
    transition:all 0.4s;
    .logo{
      width:100%;
      height:60px;
      background-size:60%;
      background:url(../../static/logo-close.png) center center no-repeat;

      line-height:60px;
      display: inherit;
      img{
        width:100%;
        height:60px;
      }
    }
    .el-menu--collapse{
      width:60px !important;
      border-right:0px;
/*      margin-top:20px;*/
    }
  }

  .el-dropdown{cursor:pointer;}

  /*修改密码显示和影藏*/
  .password-eye{
    position: absolute;
    right: -20px;
    top: 10px;
  }
</style>

